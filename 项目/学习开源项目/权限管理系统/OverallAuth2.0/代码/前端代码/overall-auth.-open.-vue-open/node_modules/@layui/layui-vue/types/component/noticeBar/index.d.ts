declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            height: string | number;
            background: string;
            color: string;
            text: string;
            size: string | number;
            speed: number;
            delay: number;
            textlist: any[];
            scrollable: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            height: {
                type: import("vue").PropType<string | number>;
            } & {
                default: number;
            };
            background: {
                type: import("vue").PropType<string>;
            } & {
                default: () => "var(--color-warning-light-9)";
            };
            color: {
                type: import("vue").PropType<string>;
            } & {
                default: () => "var(--color-warning)";
            };
            text: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            size: {
                type: import("vue").PropType<string | number>;
            } & {
                default: number;
            };
            mode: {
                type: import("vue").PropType<string>;
            };
            speed: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            delay: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            textlist: {
                type: import("vue").PropType<any[]>;
            } & {
                default: () => never[];
            };
            scrollable: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            leftIcon: {
                type: import("vue").PropType<string>;
            };
            rightIcon: {
                type: import("vue").PropType<string>;
            };
        }>> & {
            onLink?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "height" | "background" | "color" | "text" | "size" | "speed" | "delay" | "textlist" | "scrollable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "link" | "close", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            height: {
                type: import("vue").PropType<string | number>;
            } & {
                default: number;
            };
            background: {
                type: import("vue").PropType<string>;
            } & {
                default: () => "var(--color-warning-light-9)";
            };
            color: {
                type: import("vue").PropType<string>;
            } & {
                default: () => "var(--color-warning)";
            };
            text: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            size: {
                type: import("vue").PropType<string | number>;
            } & {
                default: number;
            };
            mode: {
                type: import("vue").PropType<string>;
            };
            speed: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            delay: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            textlist: {
                type: import("vue").PropType<any[]>;
            } & {
                default: () => never[];
            };
            scrollable: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            leftIcon: {
                type: import("vue").PropType<string>;
            };
            rightIcon: {
                type: import("vue").PropType<string>;
            };
        }>> & {
            onLink?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("link" | "close")[], string, {
            height: string | number;
            background: string;
            color: string;
            text: string;
            size: string | number;
            speed: number;
            delay: number;
            textlist: any[];
            scrollable: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        height: {
            type: import("vue").PropType<string | number>;
        } & {
            default: number;
        };
        background: {
            type: import("vue").PropType<string>;
        } & {
            default: () => "var(--color-warning-light-9)";
        };
        color: {
            type: import("vue").PropType<string>;
        } & {
            default: () => "var(--color-warning)";
        };
        text: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        size: {
            type: import("vue").PropType<string | number>;
        } & {
            default: number;
        };
        mode: {
            type: import("vue").PropType<string>;
        };
        speed: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        delay: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        textlist: {
            type: import("vue").PropType<any[]>;
        } & {
            default: () => never[];
        };
        scrollable: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        leftIcon: {
            type: import("vue").PropType<string>;
        };
        rightIcon: {
            type: import("vue").PropType<string>;
        };
    }>> & {
        onLink?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    height: {
        type: import("vue").PropType<string | number>;
    } & {
        default: number;
    };
    background: {
        type: import("vue").PropType<string>;
    } & {
        default: () => "var(--color-warning-light-9)";
    };
    color: {
        type: import("vue").PropType<string>;
    } & {
        default: () => "var(--color-warning)";
    };
    text: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    size: {
        type: import("vue").PropType<string | number>;
    } & {
        default: number;
    };
    mode: {
        type: import("vue").PropType<string>;
    };
    speed: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    delay: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    textlist: {
        type: import("vue").PropType<any[]>;
    } & {
        default: () => never[];
    };
    scrollable: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    leftIcon: {
        type: import("vue").PropType<string>;
    };
    rightIcon: {
        type: import("vue").PropType<string>;
    };
}>> & {
    onLink?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("link" | "close")[], "link" | "close", {
    height: string | number;
    background: string;
    color: string;
    text: string;
    size: string | number;
    speed: number;
    delay: number;
    textlist: any[];
    scrollable: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default component;
