import { w as e } from "../utils/index.js";
import { defineComponent as a, useAttrs as l, useSlots as c, ref as s, inject as r, computed as t, watch as d, openBlock as u, createElementBlock as i, normalizeStyle as o, unref as v, normalizeClass as n, createCommentVNode as y, renderSlot as k, createTextVNode as h, toDisplayString as p, createElementVNode as m } from "vue";
const V = { key: 0, class: "layui-checkcard-is-cover" }, $ = ["src"], x = { key: 0, class: "layui-checkcard-left" }, f = { key: 0, class: "layui-checkcard-avatar" }, b = ["src"], g = { class: "layui-checkcard-right" }, A = { key: 0, class: "layui-checkcard-header" }, C = { key: 0, class: "layui-checkcard-extra" }, B = { key: 1, class: "layui-checkcard-desc" }, G = e(a({ name: "LayCheckcard", props: { title: null, avatar: null, description: null, cover: null, extra: null, disabled: { type: Boolean, default: false }, value: null, modelValue: { type: Boolean, default: false } }, emits: ["change", "update:modelValue"], setup(e2, { emit: a2 }) {
  const G2 = e2, L = l(), j = c(), w = s(G2.modelValue), I = r("checkcardGroup", {}), q = t(() => I && "LayCheckCardGroup" === I.name), z = t(() => L.style), D = s(G2.disabled || I.disabled), E = t(() => ({ "layui-checkcard-is-description": !G2.description && !j.description, "layui-checkcard-content": true })), F = t(() => ({ "layui-checkcard-title": true, "layui-checkcard-is-extra": j.extra })), H = t({ get: () => q.value ? Array.isArray(I.modelVal.value) ? I.modelVal.value.includes(G2.value) : I.modelVal.value === G2.value : w.value, set(e3) {
    q.value ? Array.isArray(I.modelVal.value) ? I.modelVal.value = K() : I.modelVal.value = G2.value : (w.value = e3, a2("change", e3), a2("update:modelValue", e3));
  } }), J = t(() => {
    if (q.value)
      return I.modelVal.value;
  }), K = () => {
    let e3 = [...J.value];
    const a3 = e3.findIndex((e4) => e4 === G2.value);
    return a3 < 0 ? e3.push(G2.value) : e3.splice(a3, 1), e3;
  }, M = (e3) => {
    D.value || (H.value = !H.value);
  };
  d(() => G2.disabled, (e3) => {
    q.value || (D.value = e3);
  }), d(() => G2.modelValue, (e3) => {
    w.value = e3;
  });
  const N = t(() => ({ "layui-checkcard-checked": H.value, "layui-checkcard": true, "layui-checkcard-bordered": true, "layui-checkcard-disabled": D.value }));
  return (a3, l2) => (u(), i("div", { style: o(v(z)), class: n(v(N)), onClick: M }, [a3.$slots.cover || e2.cover ? (u(), i("div", V, [e2.cover ? (u(), i("img", { key: 0, src: e2.cover }, null, 8, $)) : y("", true), a3.$slots.cover ? k(a3.$slots, "cover", { key: 1 }, () => [h(p(e2.cover), 1)]) : y("", true)])) : (u(), i("div", { key: 1, class: n(v(E)) }, [a3.$slots.avatar || e2.avatar ? (u(), i("div", x, [e2.avatar ? (u(), i("span", f, [m("img", { src: e2.avatar }, null, 8, b)])) : y("", true), a3.$slots.avatar ? k(a3.$slots, "avatar", { key: 1 }, () => [h(p(e2.avatar), 1)]) : y("", true)])) : y("", true), m("div", g, [a3.$slots.title || e2.title ? (u(), i("div", A, [m("span", { class: n(v(F)) }, [k(a3.$slots, "title", {}, () => [h(p(e2.title), 1)])], 2), a3.$slots.extra ? (u(), i("div", C, [k(a3.$slots, "extra", {}, () => [h(p(e2.extra), 1)])])) : y("", true)])) : y("", true), a3.$slots.description || e2.description ? (u(), i("div", B, [k(a3.$slots, "description", {}, () => [h(p(e2.description), 1)])])) : y("", true)])], 2))], 6));
} }));
export { G as default };
