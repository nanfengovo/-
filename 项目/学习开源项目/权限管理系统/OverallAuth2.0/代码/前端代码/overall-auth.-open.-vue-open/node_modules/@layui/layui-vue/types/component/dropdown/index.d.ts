declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            visible: boolean;
            disabled: boolean;
            trigger: import("./index.vue").DropdownTrigger | import("./index.vue").DropdownTrigger[];
            placement: import("./interface").DropdownPlacement;
            disabledTeleport: boolean;
            autoFitPosition: boolean;
            autoFitWidth: boolean;
            autoFitMinWidth: boolean;
            updateAtScroll: boolean;
            autoFixPosition: boolean;
            clickToClose: boolean;
            blurToClose: boolean;
            clickOutsideToClose: boolean;
            contentOffset: number;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            alignPoint: boolean;
            popupContainer: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            visible: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            trigger: {
                type: import("vue").PropType<import("./index.vue").DropdownTrigger | import("./index.vue").DropdownTrigger[]>;
            } & {
                default: string;
            };
            placement: {
                type: import("vue").PropType<import("./interface").DropdownPlacement>;
            } & {
                default: string;
            };
            disabledTeleport: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoFitPosition: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoFitWidth: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoFitMinWidth: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            updateAtScroll: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoFixPosition: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            clickToClose: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            blurToClose: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            clickOutsideToClose: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            contentOffset: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            mouseEnterDelay: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            mouseLeaveDelay: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            focusDelay: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            alignPoint: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            contentClass: {
                type: import("vue").PropType<string | object | (string | object)[]>;
            };
            contentStyle: {
                type: import("vue").PropType<import("vue").StyleValue>;
            };
            popupContainer: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
        }>> & {
            onHide?: ((...args: any[]) => any) | undefined;
            onShow?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "visible" | "disabled" | "trigger" | "placement" | "disabledTeleport" | "autoFitPosition" | "autoFitWidth" | "autoFitMinWidth" | "updateAtScroll" | "autoFixPosition" | "clickToClose" | "blurToClose" | "clickOutsideToClose" | "contentOffset" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "alignPoint" | "popupContainer">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "hide" | "show", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            visible: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            trigger: {
                type: import("vue").PropType<import("./index.vue").DropdownTrigger | import("./index.vue").DropdownTrigger[]>;
            } & {
                default: string;
            };
            placement: {
                type: import("vue").PropType<import("./interface").DropdownPlacement>;
            } & {
                default: string;
            };
            disabledTeleport: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoFitPosition: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoFitWidth: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoFitMinWidth: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            updateAtScroll: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoFixPosition: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            clickToClose: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            blurToClose: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            clickOutsideToClose: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            contentOffset: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            mouseEnterDelay: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            mouseLeaveDelay: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            focusDelay: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            alignPoint: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            contentClass: {
                type: import("vue").PropType<string | object | (string | object)[]>;
            };
            contentStyle: {
                type: import("vue").PropType<import("vue").StyleValue>;
            };
            popupContainer: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
        }>> & {
            onHide?: ((...args: any[]) => any) | undefined;
            onShow?: ((...args: any[]) => any) | undefined;
        }, {
            show: (delay?: number | undefined) => void;
            hide: (delay?: number | undefined) => void;
            toggle: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("hide" | "show")[], string, {
            visible: boolean;
            disabled: boolean;
            trigger: import("./index.vue").DropdownTrigger | import("./index.vue").DropdownTrigger[];
            placement: import("./interface").DropdownPlacement;
            disabledTeleport: boolean;
            autoFitPosition: boolean;
            autoFitWidth: boolean;
            autoFitMinWidth: boolean;
            updateAtScroll: boolean;
            autoFixPosition: boolean;
            clickToClose: boolean;
            blurToClose: boolean;
            clickOutsideToClose: boolean;
            contentOffset: number;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            alignPoint: boolean;
            popupContainer: string;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        visible: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        trigger: {
            type: import("vue").PropType<import("./index.vue").DropdownTrigger | import("./index.vue").DropdownTrigger[]>;
        } & {
            default: string;
        };
        placement: {
            type: import("vue").PropType<import("./interface").DropdownPlacement>;
        } & {
            default: string;
        };
        disabledTeleport: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        autoFitPosition: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        autoFitWidth: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        autoFitMinWidth: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        updateAtScroll: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        autoFixPosition: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        clickToClose: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        blurToClose: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        clickOutsideToClose: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        contentOffset: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        mouseEnterDelay: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        mouseLeaveDelay: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        focusDelay: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        alignPoint: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        contentClass: {
            type: import("vue").PropType<string | object | (string | object)[]>;
        };
        contentStyle: {
            type: import("vue").PropType<import("vue").StyleValue>;
        };
        popupContainer: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
    }>> & {
        onHide?: ((...args: any[]) => any) | undefined;
        onShow?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        show: (delay?: number | undefined) => void;
        hide: (delay?: number | undefined) => void;
        toggle: () => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    visible: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<import("./index.vue").DropdownTrigger | import("./index.vue").DropdownTrigger[]>;
    } & {
        default: string;
    };
    placement: {
        type: import("vue").PropType<import("./interface").DropdownPlacement>;
    } & {
        default: string;
    };
    disabledTeleport: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    autoFitPosition: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    autoFitWidth: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    autoFitMinWidth: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    updateAtScroll: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    autoFixPosition: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    clickToClose: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    blurToClose: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    clickOutsideToClose: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    contentOffset: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    mouseEnterDelay: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    mouseLeaveDelay: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    focusDelay: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    alignPoint: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    contentClass: {
        type: import("vue").PropType<string | object | (string | object)[]>;
    };
    contentStyle: {
        type: import("vue").PropType<import("vue").StyleValue>;
    };
    popupContainer: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
}>> & {
    onHide?: ((...args: any[]) => any) | undefined;
    onShow?: ((...args: any[]) => any) | undefined;
}, {
    show: (delay?: number | undefined) => void;
    hide: (delay?: number | undefined) => void;
    toggle: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("hide" | "show")[], "hide" | "show", {
    visible: boolean;
    disabled: boolean;
    trigger: import("./index.vue").DropdownTrigger | import("./index.vue").DropdownTrigger[];
    placement: import("./interface").DropdownPlacement;
    disabledTeleport: boolean;
    autoFitPosition: boolean;
    autoFitWidth: boolean;
    autoFitMinWidth: boolean;
    updateAtScroll: boolean;
    autoFixPosition: boolean;
    clickToClose: boolean;
    blurToClose: boolean;
    clickOutsideToClose: boolean;
    contentOffset: number;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    focusDelay: number;
    alignPoint: boolean;
    popupContainer: string;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        content: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
