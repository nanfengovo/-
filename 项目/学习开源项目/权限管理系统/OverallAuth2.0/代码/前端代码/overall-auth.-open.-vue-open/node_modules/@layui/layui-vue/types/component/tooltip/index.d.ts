declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            position: string;
            visible: boolean;
            disabled: boolean;
            trigger: import("./index.vue").PopperTrigger | import("./index.vue").PopperTrigger[];
            enterable: boolean;
            isDark: boolean;
            isCanHide: boolean;
            isAutoShow: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            content: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            position: {
                type: StringConstructor;
                default: string;
            };
            isDark: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            isCanHide: {
                type: BooleanConstructor;
                default: boolean;
            };
            isAutoShow: {
                type: BooleanConstructor;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                default: boolean;
            };
            trigger: {
                type: import("vue").PropType<import("./index.vue").PopperTrigger | import("./index.vue").PopperTrigger[]>;
                default: string;
            };
            enterable: {
                type: BooleanConstructor;
                default: boolean;
            };
            popperClass: {
                type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
            };
            popperStyle: {
                type: import("vue").PropType<import("vue").StyleValue>;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "position" | "visible" | "disabled" | "trigger" | "enterable" | "isDark" | "isCanHide" | "isAutoShow">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            content: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            position: {
                type: StringConstructor;
                default: string;
            };
            isDark: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            isCanHide: {
                type: BooleanConstructor;
                default: boolean;
            };
            isAutoShow: {
                type: BooleanConstructor;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                default: boolean;
            };
            trigger: {
                type: import("vue").PropType<import("./index.vue").PopperTrigger | import("./index.vue").PopperTrigger[]>;
                default: string;
            };
            enterable: {
                type: BooleanConstructor;
                default: boolean;
            };
            popperClass: {
                type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
            };
            popperStyle: {
                type: import("vue").PropType<import("vue").StyleValue>;
            };
        }>>, {
            hide: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            position: string;
            visible: boolean;
            disabled: boolean;
            trigger: import("./index.vue").PopperTrigger | import("./index.vue").PopperTrigger[];
            enterable: boolean;
            isDark: boolean;
            isCanHide: boolean;
            isAutoShow: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        position: {
            type: StringConstructor;
            default: string;
        };
        isDark: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        isCanHide: {
            type: BooleanConstructor;
            default: boolean;
        };
        isAutoShow: {
            type: BooleanConstructor;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            default: boolean;
        };
        trigger: {
            type: import("vue").PropType<import("./index.vue").PopperTrigger | import("./index.vue").PopperTrigger[]>;
            default: string;
        };
        enterable: {
            type: BooleanConstructor;
            default: boolean;
        };
        popperClass: {
            type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
        };
        popperStyle: {
            type: import("vue").PropType<import("vue").StyleValue>;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        hide: () => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    isDark: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    isCanHide: {
        type: BooleanConstructor;
        default: boolean;
    };
    isAutoShow: {
        type: BooleanConstructor;
        default: boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<import("./index.vue").PopperTrigger | import("./index.vue").PopperTrigger[]>;
        default: string;
    };
    enterable: {
        type: BooleanConstructor;
        default: boolean;
    };
    popperClass: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
    };
    popperStyle: {
        type: import("vue").PropType<import("vue").StyleValue>;
    };
}>>, {
    hide: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    position: string;
    visible: boolean;
    disabled: boolean;
    trigger: import("./index.vue").PopperTrigger | import("./index.vue").PopperTrigger[];
    enterable: boolean;
    isDark: boolean;
    isCanHide: boolean;
    isAutoShow: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {}) => any;
        content: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
