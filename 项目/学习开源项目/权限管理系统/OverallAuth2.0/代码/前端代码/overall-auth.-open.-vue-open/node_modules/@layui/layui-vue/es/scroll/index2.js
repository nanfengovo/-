import { w as t } from "../utils/index.js";
import { defineComponent as e, ref as r, reactive as l, onMounted as o, nextTick as i, onUnmounted as a, openBlock as n, createElementBlock as s, normalizeClass as u, normalizeStyle as c, createElementVNode as h, renderSlot as d, withModifiers as g } from "vue";
const b = { class: "layui-scroll-y" }, m = ["onMousedown"], v = e({ name: "LayScroll", props: { height: { default: "100%" }, trackColor: { default: "rgba(0,0,0,0)" }, thumbColor: { default: "#eeeeee" }, thumbWidth: { default: 6 } }, emits: ["arrive"], setup(t2, { emit: e2 }) {
  const v2 = r(), f2 = r(), w = l({ translateY: 0, heightPre: 0, barHeight: 0, winWidth: document.body.clientWidth });
  let p, y = false, Y = 0, H = 0, W = 0, k = 0;
  o(() => {
    P(), C(), i(() => {
      M();
    });
  }), a(() => {
    window.clearInterval(p);
  });
  const P = function() {
    let t3;
    window.addEventListener("resize", () => {
      w.winWidth = document.body.clientWidth, clearTimeout(t3), t3 = setTimeout(() => {
        T();
      }, 500);
    });
  }, C = function() {
    new (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver)((t3) => {
      T();
    }).observe(v2.value, { attributes: true, childList: true, subtree: true });
  }, M = function() {
    p = setInterval(() => {
      T();
    }, 50), setTimeout(() => {
      window.clearInterval(p);
    }, 2e3);
  }, T = function() {
    let t3 = v2.value, e3 = f2.value;
    t3 && e3 && (k = t3.scrollHeight, W = t3.clientHeight, H = e3.clientHeight, w.heightPre = W / k, w.barHeight = w.heightPre * H);
  }, x = (t3) => {
    w.translateY = t3.target.scrollTop * w.heightPre, 0 == w.translateY ? I("top") : t3.target.scrollTop + t3.target.offsetHeight == t3.target.scrollHeight && I("bottom");
  }, I = (t3) => {
    e2("arrive", t3);
  }, L = (t3) => {
    y = true, Y = t3.clientY - w.translateY, O(), _();
  }, O = () => {
    document.onmousemove = (t3) => {
      y && (t3.clientY - Y > H - w.barHeight ? w.translateY = H - w.barHeight : t3.clientY - Y < 0 ? w.translateY = 0 : w.translateY = t3.clientY - Y, v2.value && (v2.value.scrollTop = w.translateY / w.heightPre));
    };
  }, _ = function() {
    document.onmouseup = (t3) => {
      y && (y = false);
    };
  };
  return (e3, r2) => (n(), s("div", { class: u(["layui-scroll", { hide: w.winWidth < 500 }]), style: c({ height: t2.height }) }, [h("div", b, [h("div", { ref_key: "scrollRef", ref: v2, class: "layui-scroll-wrap", onScroll: x }, [d(e3.$slots, "default")], 544), h("div", { ref_key: "barRef", ref: f2, class: "layui-scroll-track", style: c({ backgroundColor: 1 == w.heightPre ? "transparent" : t2.trackColor }) }, [h("div", { style: c({ height: w.barHeight + "px", width: t2.thumbWidth + "px", transform: "translateY(" + w.translateY + "px)", backgroundColor: 1 == w.heightPre ? "transparent" : t2.thumbColor }), class: "layui-scroll-thumb", onMousedown: g(L, ["stop", "prevent"]) }, null, 44, m)], 4)])], 6));
} }), f = t(v);
export { v as _, f as c };
