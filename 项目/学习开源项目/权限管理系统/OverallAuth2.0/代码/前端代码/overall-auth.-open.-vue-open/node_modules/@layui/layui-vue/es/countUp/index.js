import { w as e } from "../utils/index.js";
import { defineComponent as a, ref as t, computed as s, watch as l, onMounted as u, openBlock as n, createElementBlock as o, Fragment as r, renderSlot as i, createElementVNode as d, toDisplayString as f, unref as p } from "vue";
import { T as c, e as m } from "../_chunks/@vueuse/index.js";
const x = e(a({ name: "LayCountUp", props: { startVal: { default: 0 }, endVal: { default: 0 }, decimal: { default: "." }, decimalPlaces: { default: 0 }, useGrouping: { type: Boolean, default: true }, separator: { default: "," }, autoplay: { type: Boolean, default: true }, useEasing: { type: Boolean, default: true }, easingFn: { default: c.easeInOutCubic }, duration: { default: 2e3 }, prefix: { default: "" }, suffix: { default: "" } }, setup(e2, { expose: a2 }) {
  const x2 = e2;
  let g = t(x2.startVal);
  const y = (e3) => {
    if ("number" != typeof e3)
      return "0";
    e3 = e3.toFixed(x2.decimalPlaces);
    const a3 = (e3 += "").split(".");
    let t2 = a3[0];
    const s2 = a3.length > 1 ? x2.decimal + a3[1] : "", l2 = /(\d+)(\d{3})/;
    if (x2.useGrouping && x2.separator && (u2 = x2.separator, isNaN(parseFloat(u2))))
      for (; l2.test(t2); )
        t2 = t2.replace(l2, "$1" + x2.separator + "$2");
    var u2;
    return x2.prefix + t2 + s2 + x2.suffix;
  }, v = m(g, { delay: 0, duration: x2.duration, disabled: !x2.useEasing, transition: "string" == typeof x2.easingFn ? c[x2.easingFn] : x2.easingFn }), F = s(() => y(v.value)), V = function() {
    g.value = x2.endVal;
  };
  return l(() => x2.endVal, () => {
    x2.autoplay && (g.value = x2.endVal);
  }), u(() => {
    x2.autoplay && V();
  }), a2({ start: V }), (e3, a3) => (n(), o(r, null, [i(e3.$slots, "prefix"), d("span", null, f(p(F)), 1), i(e3.$slots, "suffix")], 64));
} }));
export { x as default };
