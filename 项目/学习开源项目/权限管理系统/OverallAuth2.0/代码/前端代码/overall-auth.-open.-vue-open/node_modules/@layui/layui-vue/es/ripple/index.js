import { w as e } from "../utils/index.js";
import { defineComponent as t, ref as a, computed as i, onMounted as l, watch as r, openBlock as u, createElementBlock as n, mergeProps as s, toHandlerKey as p, createElementVNode as o, normalizeClass as d, unref as y, normalizeStyle as c, renderSlot as v } from "vue";
const f = e(t({ name: "LayRipple", props: { type: { default: "inset" }, color: { default: "currentColor" }, borderRadius: { default: "0" }, spreadWidth: { default: "6px" }, spreadSize: null, trigger: { default: "click" }, center: { type: Boolean, default: false } }, setup(e2) {
  const t2 = e2, f2 = a(false), g = a("0px"), m = a(null), h = a(null), w = i(() => "out" === t2.type), x = a(void 0), R = a(void 0), k = function(e3) {
    if (f2.value = true, "inset" === t2.type && !t2.spreadSize && !t2.center) {
      const t3 = e3.currentTarget.getBoundingClientRect(), a2 = event.clientX - t3.left, i2 = event.clientY - t3.top, l2 = Math.max(a2, t3.width - a2), r2 = Math.max(i2, t3.height - i2);
      x.value = a2 + "px", R.value = i2 + "px", g.value = 2 * Math.sqrt(l2 ** 2 + r2 ** 2) + "px";
    }
  };
  return l(() => {
    !function() {
      let e3 = h.value, a2 = m.value;
      e3 && a2 && ("out" == t2.type ? a2.style.width = e3.clientWidth + "px" : (e3.style.overflow = "hidden", !t2.spreadSize || t2.center ? g.value = 1.1 * e3.clientWidth + "px" : g.value = t2.spreadSize), a2.addEventListener("animationend", () => {
        f2.value = false;
      }, false));
    }();
  }), r(() => t2.trigger, (e3) => f2.value = "always" === e3, { immediate: true }), (t3, a2) => (u(), n("div", s({ class: "layui-water-ripples-container", ref_key: "waterRipplesContainerRefEl", ref: h }, { [p(e2.trigger)]: k }), [o("div", { ref_key: "ripplesRefEl", ref: m, class: d({ "layui-out-ripples": y(w), "layui-inset-ripples": "inset" == e2.type, "layui-animate-always--out": f2.value && "always" == e2.trigger && "out" == e2.type, "layui-animate-once--out": f2.value && ("mouseenter" == e2.trigger || "click" == e2.trigger) && "out" == e2.type, "layui-animate-always--inset": f2.value && "always" == e2.trigger && "inset" == e2.type, "layui-animate-once--inset": f2.value && ("mouseenter" == e2.trigger || "click" == e2.trigger) && "inset" == e2.type }), style: c({ borderRadius: y(w) ? e2.borderRadius : "50%", left: x.value, top: R.value, "--layui-ripple-color": e2.color, "--layui-spread-width": e2.spreadWidth, "--layui-spread-size": g.value }) }, null, 6), v(t3.$slots, "default")], 16));
} }));
export { f as default };
