import { w as e } from "../utils/index.js";
import { defineComponent as i, computed as t, h as r, renderSlot as a, isVNode as s, Comment as l, Fragment as n, createTextVNode as p } from "vue";
const o = i({ name: "LaySpace", props: { align: { type: String }, direction: { type: String, default: "horizontal" }, fill: { type: Boolean, default: false }, size: { type: [Number, String, Array], default: "sm" }, wrap: { type: Boolean, default: false } }, setup(e2, { slots: i2 }) {
  const o2 = t(() => {
    var _a;
    return (_a = e2.align) != null ? _a : "horizontal" === e2.direction ? "center" : "";
  }), u2 = t(() => ["layui-space", { [`layui-space-align-${o2.value}`]: o2.value, [`layui-space-${e2.direction}`]: e2.direction, "layui-space-wrap": e2.wrap, "layui-space-fill": e2.fill }]), y = t(() => {
    const i3 = { xs: "4px", sm: "8px", md: "16px", lg: "24px" };
    let t2 = "";
    return Array.isArray(e2.size) ? t2 = e2.size.map((e3) => "number" == typeof e3 ? `${e3}px` : "string" == typeof e3 && i3[e3] || e3).join(" ") : "string" == typeof e2.size ? t2 = i3[e2.size] || e2.size : "number" == typeof e2.size && (t2 = `${e2.size}px`), { gap: t2 };
  }), c = t(() => [e2.fill ? { flexGrow: 1, minWidth: "100%" } : {}]);
  return () => {
    const e3 = (() => {
      const e4 = [], t2 = a(i2, "default").children, r2 = Array.isArray(t2) ? [...t2] : [];
      for (; r2.length; ) {
        const i3 = r2.shift();
        null !== i3 && (Array.isArray(i3) && r2.unshift(...i3), s(i3) && i3.type !== l && (i3.type === n && Array.isArray(i3.children) ? r2.unshift(i3.children) : "string" == typeof i3 || "number" == typeof i3 ? e4.push(p(i3)) : e4.push(i3)));
      }
      return e4;
    })();
    return r("div", { class: u2.value, style: y.value }, e3.map((e4, i3) => {
      var _a;
      return r("div", { key: (_a = e4.key) != null ? _a : `item-${i3}`, class: "layui-space-item", style: c.value }, r(e4));
    }));
  };
} }), u = e(o);
export { u as default };
