declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "time" | "month" | "year" | "date" | "datetime" | "yearmonth";
            disabled: boolean;
            readonly: boolean;
            range: boolean;
            format: string;
            prefixIcon: string;
            suffixIcon: string;
            modelValue: string | number | string[];
            allowClear: boolean;
            simple: boolean;
            rangeSeparator: string;
            timestamp: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            max: {
                type: import("vue").PropType<string>;
            };
            type: {
                type: import("vue").PropType<"time" | "month" | "year" | "date" | "datetime" | "yearmonth">;
            } & {
                default: string;
            };
            name: {
                type: import("vue").PropType<string>;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"lg" | "md" | "sm" | "xs">;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            range: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            placeholder: {
                type: import("vue").PropType<string | string[]>;
            };
            min: {
                type: import("vue").PropType<string>;
            };
            format: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            contentClass: {
                type: import("vue").PropType<string | object | (string | object)[]>;
            };
            contentStyle: {
                type: import("vue").PropType<import("vue").StyleValue>;
            };
            prefixIcon: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            suffixIcon: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            modelValue: {
                type: import("vue").PropType<string | number | string[]>;
            } & {
                default: string;
            };
            allowClear: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            simple: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            rangeSeparator: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            timestamp: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "disabled" | "readonly" | "range" | "format" | "prefixIcon" | "suffixIcon" | "modelValue" | "allowClear" | "simple" | "rangeSeparator" | "timestamp">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "blur" | "change" | "focus" | "update:modelValue", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            max: {
                type: import("vue").PropType<string>;
            };
            type: {
                type: import("vue").PropType<"time" | "month" | "year" | "date" | "datetime" | "yearmonth">;
            } & {
                default: string;
            };
            name: {
                type: import("vue").PropType<string>;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"lg" | "md" | "sm" | "xs">;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            range: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            placeholder: {
                type: import("vue").PropType<string | string[]>;
            };
            min: {
                type: import("vue").PropType<string>;
            };
            format: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            contentClass: {
                type: import("vue").PropType<string | object | (string | object)[]>;
            };
            contentStyle: {
                type: import("vue").PropType<import("vue").StyleValue>;
            };
            prefixIcon: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            suffixIcon: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            modelValue: {
                type: import("vue").PropType<string | number | string[]>;
            } & {
                default: string;
            };
            allowClear: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            simple: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            rangeSeparator: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            timestamp: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "update:modelValue")[], string, {
            type: "time" | "month" | "year" | "date" | "datetime" | "yearmonth";
            disabled: boolean;
            readonly: boolean;
            range: boolean;
            format: string;
            prefixIcon: string;
            suffixIcon: string;
            modelValue: string | number | string[];
            allowClear: boolean;
            simple: boolean;
            rangeSeparator: string;
            timestamp: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        max: {
            type: import("vue").PropType<string>;
        };
        type: {
            type: import("vue").PropType<"time" | "month" | "year" | "date" | "datetime" | "yearmonth">;
        } & {
            default: string;
        };
        name: {
            type: import("vue").PropType<string>;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"lg" | "md" | "sm" | "xs">;
        };
        readonly: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        range: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string | string[]>;
        };
        min: {
            type: import("vue").PropType<string>;
        };
        format: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        contentClass: {
            type: import("vue").PropType<string | object | (string | object)[]>;
        };
        contentStyle: {
            type: import("vue").PropType<import("vue").StyleValue>;
        };
        prefixIcon: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        suffixIcon: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<string | number | string[]>;
        } & {
            default: string;
        };
        allowClear: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        simple: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        rangeSeparator: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        timestamp: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
    }>> & {
        onFocus?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    max: {
        type: import("vue").PropType<string>;
    };
    type: {
        type: import("vue").PropType<"time" | "month" | "year" | "date" | "datetime" | "yearmonth">;
    } & {
        default: string;
    };
    name: {
        type: import("vue").PropType<string>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"lg" | "md" | "sm" | "xs">;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    range: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string | string[]>;
    };
    min: {
        type: import("vue").PropType<string>;
    };
    format: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    contentClass: {
        type: import("vue").PropType<string | object | (string | object)[]>;
    };
    contentStyle: {
        type: import("vue").PropType<import("vue").StyleValue>;
    };
    prefixIcon: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    suffixIcon: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<string | number | string[]>;
    } & {
        default: string;
    };
    allowClear: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    simple: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    rangeSeparator: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    timestamp: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
}>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "update:modelValue")[], "blur" | "change" | "focus" | "update:modelValue", {
    type: "time" | "month" | "year" | "date" | "datetime" | "yearmonth";
    disabled: boolean;
    readonly: boolean;
    range: boolean;
    format: string;
    prefixIcon: string;
    suffixIcon: string;
    modelValue: string | number | string[];
    allowClear: boolean;
    simple: boolean;
    rangeSeparator: string;
    timestamp: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default component;
