declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            length: number;
            text: boolean;
            readonly: string | boolean;
            isBlock: boolean;
            modelValue: number;
            allowClear: boolean;
            half: boolean;
            clearIcon: string;
            icons: string[];
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            length: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            text: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            isBlock: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            modelValue: {
                type: import("vue").PropType<number>;
                required: true;
            } & {
                default: number;
            };
            allowClear: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<string>;
            };
            half: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            clearIcon: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            icons: {
                type: import("vue").PropType<string[]>;
            } & {
                default: () => string[];
            };
        }>> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "length" | "text" | "readonly" | "isBlock" | "modelValue" | "allowClear" | "half" | "clearIcon" | "icons">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "clear" | "select" | "update:modelValue", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            length: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            text: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            isBlock: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            modelValue: {
                type: import("vue").PropType<number>;
                required: true;
            } & {
                default: number;
            };
            allowClear: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<string>;
            };
            half: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            clearIcon: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            icons: {
                type: import("vue").PropType<string[]>;
            } & {
                default: () => string[];
            };
        }>> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "select" | "update:modelValue")[], string, {
            length: number;
            text: boolean;
            readonly: string | boolean;
            isBlock: boolean;
            modelValue: number;
            allowClear: boolean;
            half: boolean;
            clearIcon: string;
            icons: string[];
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        length: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        text: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        readonly: {
            type: import("vue").PropType<string | boolean>;
        } & {
            default: boolean;
        };
        isBlock: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        modelValue: {
            type: import("vue").PropType<number>;
            required: true;
        } & {
            default: number;
        };
        allowClear: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<string>;
        };
        half: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        clearIcon: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        icons: {
            type: import("vue").PropType<string[]>;
        } & {
            default: () => string[];
        };
    }>> & {
        onSelect?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    length: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    text: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    readonly: {
        type: import("vue").PropType<string | boolean>;
    } & {
        default: boolean;
    };
    isBlock: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<number>;
        required: true;
    } & {
        default: number;
    };
    allowClear: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<string>;
    };
    half: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    clearIcon: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    icons: {
        type: import("vue").PropType<string[]>;
    } & {
        default: () => string[];
    };
}>> & {
    onSelect?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "select" | "update:modelValue")[], "clear" | "select" | "update:modelValue", {
    length: number;
    text: boolean;
    readonly: string | boolean;
    isBlock: boolean;
    modelValue: number;
    allowClear: boolean;
    half: boolean;
    clearIcon: string;
    icons: string[];
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {
            value: number;
        }) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
