declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefix: string;
            decimal: string;
            separator: string;
            duration: number;
            autoplay: boolean;
            suffix: string;
            startVal: number;
            endVal: number;
            decimalPlaces: number;
            useGrouping: boolean;
            useEasing: boolean;
            easingFn: any;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            prefix: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            decimal: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            separator: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            duration: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            autoplay: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            suffix: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            startVal: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            endVal: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            decimalPlaces: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            useGrouping: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            useEasing: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            easingFn: {
                type: import("vue").PropType<any>;
            } & {
                default: [number, number, number, number] | ((n: number) => number);
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefix" | "decimal" | "separator" | "duration" | "autoplay" | "suffix" | "startVal" | "endVal" | "decimalPlaces" | "useGrouping" | "useEasing" | "easingFn">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            prefix: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            decimal: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            separator: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            duration: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            autoplay: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            suffix: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            startVal: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            endVal: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            decimalPlaces: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            useGrouping: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            useEasing: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            easingFn: {
                type: import("vue").PropType<any>;
            } & {
                default: [number, number, number, number] | ((n: number) => number);
            };
        }>>, {
            start: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            prefix: string;
            decimal: string;
            separator: string;
            duration: number;
            autoplay: boolean;
            suffix: string;
            startVal: number;
            endVal: number;
            decimalPlaces: number;
            useGrouping: boolean;
            useEasing: boolean;
            easingFn: any;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        prefix: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        decimal: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        separator: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        duration: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        autoplay: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        suffix: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        startVal: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        endVal: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        decimalPlaces: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        useGrouping: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        useEasing: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        easingFn: {
            type: import("vue").PropType<any>;
        } & {
            default: [number, number, number, number] | ((n: number) => number);
        };
    }>> & import("vue").ShallowUnwrapRef<{
        start: () => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    prefix: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    decimal: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    separator: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    duration: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    autoplay: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    suffix: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    startVal: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    endVal: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    decimalPlaces: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    useGrouping: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    useEasing: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    easingFn: {
        type: import("vue").PropType<any>;
    } & {
        default: [number, number, number, number] | ((n: number) => number);
    };
}>>, {
    start: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    prefix: string;
    decimal: string;
    separator: string;
    duration: number;
    autoplay: boolean;
    suffix: string;
    startVal: number;
    endVal: number;
    decimalPlaces: number;
    useGrouping: boolean;
    useEasing: boolean;
    easingFn: any;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        prefix: (_: {}) => any;
        suffix: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
