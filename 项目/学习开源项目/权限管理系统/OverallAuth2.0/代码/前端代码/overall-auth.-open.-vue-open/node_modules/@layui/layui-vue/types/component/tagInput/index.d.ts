declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            size: import("./inerface").TagInputSize;
            placeholder: string;
            minCollapsedNum: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            max: {
                type: import("vue").PropType<number>;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            };
            size: {
                type: import("vue").PropType<import("./inerface").TagInputSize>;
            } & {
                default: string;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
            };
            placeholder: {
                type: import("vue").PropType<string>;
            } & {
                default: undefined;
            };
            modelValue: {
                type: import("vue").PropType<(string | number | import("./index.vue").TagData)[]>;
            };
            allowClear: {
                type: import("vue").PropType<boolean>;
            };
            disabledInput: {
                type: import("vue").PropType<boolean>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
            };
            minCollapsedNum: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            collapseTagsTooltip: {
                type: import("vue").PropType<boolean>;
            };
            tagProps: {
                type: import("vue").PropType<import("../tag/index.vue").TagProps>;
            };
        }>> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            "onUpdate:inputValue"?: ((...args: any[]) => any) | undefined;
            onInputValueChange?: ((...args: any[]) => any) | undefined;
            onPressEnter?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "placeholder" | "minCollapsedNum">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "remove" | "clear" | "blur" | "change" | "focus" | "update:modelValue" | "update:inputValue" | "inputValueChange" | "pressEnter", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            max: {
                type: import("vue").PropType<number>;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            };
            size: {
                type: import("vue").PropType<import("./inerface").TagInputSize>;
            } & {
                default: string;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
            };
            placeholder: {
                type: import("vue").PropType<string>;
            } & {
                default: undefined;
            };
            modelValue: {
                type: import("vue").PropType<(string | number | import("./index.vue").TagData)[]>;
            };
            allowClear: {
                type: import("vue").PropType<boolean>;
            };
            disabledInput: {
                type: import("vue").PropType<boolean>;
            };
            inputValue: {
                type: import("vue").PropType<string>;
            };
            minCollapsedNum: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            collapseTagsTooltip: {
                type: import("vue").PropType<boolean>;
            };
            tagProps: {
                type: import("vue").PropType<import("../tag/index.vue").TagProps>;
            };
        }>> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            "onUpdate:inputValue"?: ((...args: any[]) => any) | undefined;
            onInputValueChange?: ((...args: any[]) => any) | undefined;
            onPressEnter?: ((...args: any[]) => any) | undefined;
        }, {
            focus: (e: FocusEvent) => void;
            blur: (e: FocusEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("remove" | "clear" | "blur" | "change" | "focus" | "update:modelValue" | "update:inputValue" | "inputValueChange" | "pressEnter")[], string, {
            size: import("./inerface").TagInputSize;
            placeholder: string;
            minCollapsedNum: number;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        max: {
            type: import("vue").PropType<number>;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        };
        size: {
            type: import("vue").PropType<import("./inerface").TagInputSize>;
        } & {
            default: string;
        };
        readonly: {
            type: import("vue").PropType<boolean>;
        };
        placeholder: {
            type: import("vue").PropType<string>;
        } & {
            default: undefined;
        };
        modelValue: {
            type: import("vue").PropType<(string | number | import("./index.vue").TagData)[]>;
        };
        allowClear: {
            type: import("vue").PropType<boolean>;
        };
        disabledInput: {
            type: import("vue").PropType<boolean>;
        };
        inputValue: {
            type: import("vue").PropType<string>;
        };
        minCollapsedNum: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        collapseTagsTooltip: {
            type: import("vue").PropType<boolean>;
        };
        tagProps: {
            type: import("vue").PropType<import("../tag/index.vue").TagProps>;
        };
    }>> & {
        onFocus?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
        "onUpdate:inputValue"?: ((...args: any[]) => any) | undefined;
        onInputValueChange?: ((...args: any[]) => any) | undefined;
        onPressEnter?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        focus: (e: FocusEvent) => void;
        blur: (e: FocusEvent) => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    max: {
        type: import("vue").PropType<number>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    size: {
        type: import("vue").PropType<import("./inerface").TagInputSize>;
    } & {
        default: string;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
    };
    placeholder: {
        type: import("vue").PropType<string>;
    } & {
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<(string | number | import("./index.vue").TagData)[]>;
    };
    allowClear: {
        type: import("vue").PropType<boolean>;
    };
    disabledInput: {
        type: import("vue").PropType<boolean>;
    };
    inputValue: {
        type: import("vue").PropType<string>;
    };
    minCollapsedNum: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    collapseTagsTooltip: {
        type: import("vue").PropType<boolean>;
    };
    tagProps: {
        type: import("vue").PropType<import("../tag/index.vue").TagProps>;
    };
}>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    "onUpdate:inputValue"?: ((...args: any[]) => any) | undefined;
    onInputValueChange?: ((...args: any[]) => any) | undefined;
    onPressEnter?: ((...args: any[]) => any) | undefined;
}, {
    focus: (e: FocusEvent) => void;
    blur: (e: FocusEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("remove" | "clear" | "blur" | "change" | "focus" | "update:modelValue" | "update:inputValue" | "inputValueChange" | "pressEnter")[], "remove" | "clear" | "blur" | "change" | "focus" | "update:modelValue" | "update:inputValue" | "inputValueChange" | "pressEnter", {
    size: import("./inerface").TagInputSize;
    placeholder: string;
    minCollapsedNum: number;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        prepend: (_: {}) => any;
        prefix: (_: {}) => any;
        suffix: (_: {}) => any;
        append: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
