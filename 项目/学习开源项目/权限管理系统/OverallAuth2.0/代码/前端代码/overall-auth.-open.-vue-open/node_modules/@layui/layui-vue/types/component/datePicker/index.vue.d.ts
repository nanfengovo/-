import "./index.less";
import { StyleValue } from "vue";
export interface DatePickerProps {
    placeholder?: string | string[];
    modelValue?: string | number | string[];
    type?: "date" | "datetime" | "year" | "time" | "month" | "yearmonth";
    disabled?: boolean;
    simple?: boolean;
    name?: string;
    max?: string;
    min?: string;
    range?: boolean;
    rangeSeparator?: string;
    readonly?: boolean;
    allowClear?: boolean;
    size?: "lg" | "md" | "sm" | "xs";
    prefixIcon?: string;
    suffixIcon?: string;
    timestamp?: boolean;
    contentClass?: string | Array<string | object> | object;
    contentStyle?: StyleValue;
    format?: string;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "time" | "month" | "year" | "date" | "datetime" | "yearmonth";
            disabled: boolean;
            readonly: boolean;
            range: boolean;
            format: string;
            prefixIcon: string;
            suffixIcon: string;
            modelValue: string | number | string[];
            allowClear: boolean;
            simple: boolean;
            rangeSeparator: string;
            timestamp: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DatePickerProps>, {
            modelValue: string;
            type: string;
            disabled: boolean;
            simple: boolean;
            range: boolean;
            rangeSeparator: string;
            readonly: boolean;
            allowClear: boolean;
            prefixIcon: string;
            suffixIcon: string;
            timestamp: boolean;
            format: string;
        }>>> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "disabled" | "readonly" | "range" | "format" | "prefixIcon" | "suffixIcon" | "modelValue" | "allowClear" | "simple" | "rangeSeparator" | "timestamp">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "blur" | "change" | "focus" | "update:modelValue", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DatePickerProps>, {
            modelValue: string;
            type: string;
            disabled: boolean;
            simple: boolean;
            range: boolean;
            rangeSeparator: string;
            readonly: boolean;
            allowClear: boolean;
            prefixIcon: string;
            suffixIcon: string;
            timestamp: boolean;
            format: string;
        }>>> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "update:modelValue")[], string, {
            type: "time" | "month" | "year" | "date" | "datetime" | "yearmonth";
            disabled: boolean;
            readonly: boolean;
            range: boolean;
            format: string;
            prefixIcon: string;
            suffixIcon: string;
            modelValue: string | number | string[];
            allowClear: boolean;
            simple: boolean;
            rangeSeparator: string;
            timestamp: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DatePickerProps>, {
        modelValue: string;
        type: string;
        disabled: boolean;
        simple: boolean;
        range: boolean;
        rangeSeparator: string;
        readonly: boolean;
        allowClear: boolean;
        prefixIcon: string;
        suffixIcon: string;
        timestamp: boolean;
        format: string;
    }>>> & {
        onFocus?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DatePickerProps>, {
    modelValue: string;
    type: string;
    disabled: boolean;
    simple: boolean;
    range: boolean;
    rangeSeparator: string;
    readonly: boolean;
    allowClear: boolean;
    prefixIcon: string;
    suffixIcon: string;
    timestamp: boolean;
    format: string;
}>>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "update:modelValue")[], "blur" | "change" | "focus" | "update:modelValue", {
    type: "time" | "month" | "year" | "date" | "datetime" | "yearmonth";
    disabled: boolean;
    readonly: boolean;
    range: boolean;
    format: string;
    prefixIcon: string;
    suffixIcon: string;
    modelValue: string | number | string[];
    allowClear: boolean;
    simple: boolean;
    rangeSeparator: string;
    timestamp: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
