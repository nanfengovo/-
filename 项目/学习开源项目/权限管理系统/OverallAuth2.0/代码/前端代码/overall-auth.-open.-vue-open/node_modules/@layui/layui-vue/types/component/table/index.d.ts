declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            id: string;
            maxHeight: string;
            resize: boolean;
            loading: boolean;
            size: string;
            selectedKey: string;
            indentSize: number;
            expandIndex: number;
            selectedKeys: string[];
            childrenColumnName: string;
            cellClassName: string | Function;
            cellStyle: string | Function;
            rowClassName: string | Function;
            rowStyle: string | Function;
            spanMethod: Function;
            defaultExpandAll: boolean;
            expandKeys: string[];
            getCheckboxProps: Function;
            getRadioProps: Function;
            dataSource: import("../../types").Recordable[];
            defaultToolbar: boolean | any[];
            even: boolean;
            autoColsWidth: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            id: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            columns: {
                type: import("vue").PropType<import("../../types").Recordable[]>;
                required: true;
            };
            maxHeight: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            resize: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            loading: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            page: {
                type: import("vue").PropType<import("../../types").Recordable>;
            };
            skin: {
                type: import("vue").PropType<string>;
            };
            selectedKey: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            indentSize: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            expandIndex: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            selectedKeys: {
                type: import("vue").PropType<string[]>;
            } & {
                default: () => never[];
            };
            childrenColumnName: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            cellClassName: {
                type: import("vue").PropType<string | Function>;
            } & {
                default: string;
            };
            cellStyle: {
                type: import("vue").PropType<string | Function>;
            } & {
                default: string;
            };
            rowClassName: {
                type: import("vue").PropType<string | Function>;
            } & {
                default: string;
            };
            rowStyle: {
                type: import("vue").PropType<string | Function>;
            } & {
                default: string;
            };
            spanMethod: {
                type: import("vue").PropType<Function>;
            } & {
                default: () => void;
            };
            defaultExpandAll: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            expandKeys: {
                type: import("vue").PropType<string[]>;
            } & {
                default: () => never[];
            };
            getCheckboxProps: {
                type: import("vue").PropType<Function>;
            } & {
                default: () => void;
            };
            getRadioProps: {
                type: import("vue").PropType<Function>;
            } & {
                default: () => void;
            };
            dataSource: {
                type: import("vue").PropType<import("../../types").Recordable[]>;
                required: true;
            } & {
                default: () => never[];
            };
            defaultToolbar: {
                type: import("vue").PropType<boolean | any[]>;
            } & {
                default: boolean;
            };
            even: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoColsWidth: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "id" | "maxHeight" | "resize" | "loading" | "size" | "selectedKey" | "indentSize" | "expandIndex" | "selectedKeys" | "childrenColumnName" | "cellClassName" | "cellStyle" | "rowClassName" | "rowStyle" | "spanMethod" | "defaultExpandAll" | "expandKeys" | "getCheckboxProps" | "getRadioProps" | "dataSource" | "defaultToolbar" | "even" | "autoColsWidth">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            id: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            height: {
                type: import("vue").PropType<string | number>;
            };
            columns: {
                type: import("vue").PropType<import("../../types").Recordable[]>;
                required: true;
            };
            maxHeight: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            resize: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            loading: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            page: {
                type: import("vue").PropType<import("../../types").Recordable>;
            };
            skin: {
                type: import("vue").PropType<string>;
            };
            selectedKey: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            indentSize: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            expandIndex: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            selectedKeys: {
                type: import("vue").PropType<string[]>;
            } & {
                default: () => never[];
            };
            childrenColumnName: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            cellClassName: {
                type: import("vue").PropType<string | Function>;
            } & {
                default: string;
            };
            cellStyle: {
                type: import("vue").PropType<string | Function>;
            } & {
                default: string;
            };
            rowClassName: {
                type: import("vue").PropType<string | Function>;
            } & {
                default: string;
            };
            rowStyle: {
                type: import("vue").PropType<string | Function>;
            } & {
                default: string;
            };
            spanMethod: {
                type: import("vue").PropType<Function>;
            } & {
                default: () => void;
            };
            defaultExpandAll: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            expandKeys: {
                type: import("vue").PropType<string[]>;
            } & {
                default: () => never[];
            };
            getCheckboxProps: {
                type: import("vue").PropType<Function>;
            } & {
                default: () => void;
            };
            getRadioProps: {
                type: import("vue").PropType<Function>;
            } & {
                default: () => void;
            };
            dataSource: {
                type: import("vue").PropType<import("../../types").Recordable[]>;
                required: true;
            } & {
                default: () => never[];
            };
            defaultToolbar: {
                type: import("vue").PropType<boolean | any[]>;
            } & {
                default: boolean;
            };
            even: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            autoColsWidth: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
        }, {
            getCheckData: () => any[];
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
            id: string;
            maxHeight: string;
            resize: boolean;
            loading: boolean;
            size: string;
            selectedKey: string;
            indentSize: number;
            expandIndex: number;
            selectedKeys: string[];
            childrenColumnName: string;
            cellClassName: string | Function;
            cellStyle: string | Function;
            rowClassName: string | Function;
            rowStyle: string | Function;
            spanMethod: Function;
            defaultExpandAll: boolean;
            expandKeys: string[];
            getCheckboxProps: Function;
            getRadioProps: Function;
            dataSource: import("../../types").Recordable[];
            defaultToolbar: boolean | any[];
            even: boolean;
            autoColsWidth: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        height: {
            type: import("vue").PropType<string | number>;
        };
        columns: {
            type: import("vue").PropType<import("../../types").Recordable[]>;
            required: true;
        };
        maxHeight: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        resize: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        loading: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        size: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        page: {
            type: import("vue").PropType<import("../../types").Recordable>;
        };
        skin: {
            type: import("vue").PropType<string>;
        };
        selectedKey: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        indentSize: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        expandIndex: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        selectedKeys: {
            type: import("vue").PropType<string[]>;
        } & {
            default: () => never[];
        };
        childrenColumnName: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        cellClassName: {
            type: import("vue").PropType<string | Function>;
        } & {
            default: string;
        };
        cellStyle: {
            type: import("vue").PropType<string | Function>;
        } & {
            default: string;
        };
        rowClassName: {
            type: import("vue").PropType<string | Function>;
        } & {
            default: string;
        };
        rowStyle: {
            type: import("vue").PropType<string | Function>;
        } & {
            default: string;
        };
        spanMethod: {
            type: import("vue").PropType<Function>;
        } & {
            default: () => void;
        };
        defaultExpandAll: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        expandKeys: {
            type: import("vue").PropType<string[]>;
        } & {
            default: () => never[];
        };
        getCheckboxProps: {
            type: import("vue").PropType<Function>;
        } & {
            default: () => void;
        };
        getRadioProps: {
            type: import("vue").PropType<Function>;
        } & {
            default: () => void;
        };
        dataSource: {
            type: import("vue").PropType<import("../../types").Recordable[]>;
            required: true;
        } & {
            default: () => never[];
        };
        defaultToolbar: {
            type: import("vue").PropType<boolean | any[]>;
        } & {
            default: boolean;
        };
        even: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        autoColsWidth: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
    }>> & {
        [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        getCheckData: () => any[];
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    columns: {
        type: import("vue").PropType<import("../../types").Recordable[]>;
        required: true;
    };
    maxHeight: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    resize: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    size: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    page: {
        type: import("vue").PropType<import("../../types").Recordable>;
    };
    skin: {
        type: import("vue").PropType<string>;
    };
    selectedKey: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    indentSize: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    expandIndex: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    selectedKeys: {
        type: import("vue").PropType<string[]>;
    } & {
        default: () => never[];
    };
    childrenColumnName: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    cellClassName: {
        type: import("vue").PropType<string | Function>;
    } & {
        default: string;
    };
    cellStyle: {
        type: import("vue").PropType<string | Function>;
    } & {
        default: string;
    };
    rowClassName: {
        type: import("vue").PropType<string | Function>;
    } & {
        default: string;
    };
    rowStyle: {
        type: import("vue").PropType<string | Function>;
    } & {
        default: string;
    };
    spanMethod: {
        type: import("vue").PropType<Function>;
    } & {
        default: () => void;
    };
    defaultExpandAll: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    expandKeys: {
        type: import("vue").PropType<string[]>;
    } & {
        default: () => never[];
    };
    getCheckboxProps: {
        type: import("vue").PropType<Function>;
    } & {
        default: () => void;
    };
    getRadioProps: {
        type: import("vue").PropType<Function>;
    } & {
        default: () => void;
    };
    dataSource: {
        type: import("vue").PropType<import("../../types").Recordable[]>;
        required: true;
    } & {
        default: () => never[];
    };
    defaultToolbar: {
        type: import("vue").PropType<boolean | any[]>;
    } & {
        default: boolean;
    };
    even: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    autoColsWidth: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    getCheckData: () => any[];
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
    id: string;
    maxHeight: string;
    resize: boolean;
    loading: boolean;
    size: string;
    selectedKey: string;
    indentSize: number;
    expandIndex: number;
    selectedKeys: string[];
    childrenColumnName: string;
    cellClassName: string | Function;
    cellStyle: string | Function;
    rowClassName: string | Function;
    rowStyle: string | Function;
    spanMethod: Function;
    defaultExpandAll: boolean;
    expandKeys: string[];
    getCheckboxProps: Function;
    getRadioProps: Function;
    dataSource: import("../../types").Recordable[];
    defaultToolbar: boolean | any[];
    even: boolean;
    autoColsWidth: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Record<any, {}> & Record<string, {
        row: any;
        data: any;
        column: any;
        rowIndex: number;
        columnIndex: number;
    }> & {
        toolbar: (_: {}) => any;
        header: (_: {}) => any;
        expand: (_: {
            data: any;
            row: any;
        }) => any;
        footer: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
