declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            model: import("../../types").modelType;
            pane: boolean;
            initValidate: boolean;
            requiredIcons: string;
            labelPosition: string;
            useCN: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            required: {
                type: import("vue").PropType<boolean>;
            };
            size: {
                type: import("vue").PropType<string>;
            };
            model: {
                type: import("vue").PropType<import("../../types").modelType>;
            } & {
                default: () => {};
            };
            rules: {
                type: import("vue").PropType<import("async-validator").Rule>;
            };
            pane: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            initValidate: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            requiredIcons: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            labelPosition: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            labelWidth: {
                type: import("vue").PropType<string>;
            };
            requiredErrorMessage: {
                type: import("vue").PropType<string>;
            };
            validateMessage: {
                type: import("vue").PropType<import("async-validator").ValidateMessages>;
            };
            useCN: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            onSubmit?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "model" | "pane" | "initValidate" | "requiredIcons" | "labelPosition" | "useCN">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "submit", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            required: {
                type: import("vue").PropType<boolean>;
            };
            size: {
                type: import("vue").PropType<string>;
            };
            model: {
                type: import("vue").PropType<import("../../types").modelType>;
            } & {
                default: () => {};
            };
            rules: {
                type: import("vue").PropType<import("async-validator").Rule>;
            };
            pane: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            initValidate: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            requiredIcons: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            labelPosition: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            labelWidth: {
                type: import("vue").PropType<string>;
            };
            requiredErrorMessage: {
                type: import("vue").PropType<string>;
            };
            validateMessage: {
                type: import("vue").PropType<import("async-validator").ValidateMessages>;
            };
            useCN: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            onSubmit?: ((...args: any[]) => any) | undefined;
        }, {
            validate: (fields?: string | string[] | import("../../types").FormCallback | null | undefined, callback?: import("../../types").FormCallback | null | undefined) => Promise<unknown> | null;
            clearValidate: (fields?: string | string[] | undefined) => void;
            reset: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "submit"[], string, {
            model: import("../../types").modelType;
            pane: boolean;
            initValidate: boolean;
            requiredIcons: string;
            labelPosition: string;
            useCN: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        required: {
            type: import("vue").PropType<boolean>;
        };
        size: {
            type: import("vue").PropType<string>;
        };
        model: {
            type: import("vue").PropType<import("../../types").modelType>;
        } & {
            default: () => {};
        };
        rules: {
            type: import("vue").PropType<import("async-validator").Rule>;
        };
        pane: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        initValidate: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        requiredIcons: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        labelPosition: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        labelWidth: {
            type: import("vue").PropType<string>;
        };
        requiredErrorMessage: {
            type: import("vue").PropType<string>;
        };
        validateMessage: {
            type: import("vue").PropType<import("async-validator").ValidateMessages>;
        };
        useCN: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
    }>> & {
        onSubmit?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        validate: (fields?: string | string[] | import("../../types").FormCallback | null | undefined, callback?: import("../../types").FormCallback | null | undefined) => Promise<unknown> | null;
        clearValidate: (fields?: string | string[] | undefined) => void;
        reset: () => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    required: {
        type: import("vue").PropType<boolean>;
    };
    size: {
        type: import("vue").PropType<string>;
    };
    model: {
        type: import("vue").PropType<import("../../types").modelType>;
    } & {
        default: () => {};
    };
    rules: {
        type: import("vue").PropType<import("async-validator").Rule>;
    };
    pane: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    initValidate: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    requiredIcons: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    labelPosition: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    labelWidth: {
        type: import("vue").PropType<string>;
    };
    requiredErrorMessage: {
        type: import("vue").PropType<string>;
    };
    validateMessage: {
        type: import("vue").PropType<import("async-validator").ValidateMessages>;
    };
    useCN: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
}>> & {
    onSubmit?: ((...args: any[]) => any) | undefined;
}, {
    validate: (fields?: string | string[] | import("../../types").FormCallback | null | undefined, callback?: import("../../types").FormCallback | null | undefined) => Promise<unknown> | null;
    clearValidate: (fields?: string | string[] | undefined) => void;
    reset: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "submit"[], "submit", {
    model: import("../../types").modelType;
    pane: boolean;
    initValidate: boolean;
    requiredIcons: string;
    labelPosition: string;
    useCN: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
