import "./index.less";
import { nextTick } from "vue";
import { Recordable } from "../../types";
export interface TableProps {
    id?: string;
    dataSource: Recordable[];
    columns: Recordable[];
    skin?: string;
    size?: string;
    page?: Recordable;
    defaultToolbar?: boolean | any[];
    selectedKey?: string;
    selectedKeys?: string[];
    indentSize?: number;
    childrenColumnName?: string;
    height?: number | string;
    maxHeight?: string;
    even?: boolean;
    expandIndex?: number;
    rowClassName?: string | Function;
    cellClassName?: string | Function;
    rowStyle?: string | Function;
    cellStyle?: string | Function;
    spanMethod?: Function;
    defaultExpandAll?: boolean;
    expandKeys?: string[];
    loading?: boolean;
    getCheckboxProps?: Function;
    getRadioProps?: Function;
    resize?: boolean;
    autoColsWidth?: boolean;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            id: string;
            maxHeight: string;
            resize: boolean;
            loading: boolean;
            size: string;
            selectedKey: string;
            indentSize: number;
            expandIndex: number;
            selectedKeys: string[];
            childrenColumnName: string;
            cellClassName: string | Function;
            cellStyle: string | Function;
            rowClassName: string | Function;
            rowStyle: string | Function;
            spanMethod: Function;
            defaultExpandAll: boolean;
            expandKeys: string[];
            getCheckboxProps: Function;
            getRadioProps: Function;
            dataSource: Recordable[];
            defaultToolbar: boolean | any[];
            even: boolean;
            autoColsWidth: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TableProps>, {
            id: string;
            size: string;
            indentSize: number;
            childrenColumnName: string;
            dataSource: () => never[];
            selectedKeys: () => never[];
            defaultToolbar: boolean;
            selectedKey: string;
            maxHeight: string;
            even: boolean;
            rowClassName: string;
            cellClassName: string;
            expandIndex: number;
            rowStyle: string;
            cellStyle: string;
            defaultExpandAll: boolean;
            spanMethod: () => void;
            expandKeys: () => never[];
            loading: boolean;
            getCheckboxProps: () => void;
            getRadioProps: () => void;
            resize: boolean;
            autoColsWidth: boolean;
        }>>> & {
            [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "id" | "maxHeight" | "resize" | "loading" | "size" | "selectedKey" | "indentSize" | "expandIndex" | "selectedKeys" | "childrenColumnName" | "cellClassName" | "cellStyle" | "rowClassName" | "rowStyle" | "spanMethod" | "defaultExpandAll" | "expandKeys" | "getCheckboxProps" | "getRadioProps" | "dataSource" | "defaultToolbar" | "even" | "autoColsWidth">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TableProps>, {
            id: string;
            size: string;
            indentSize: number;
            childrenColumnName: string;
            dataSource: () => never[];
            selectedKeys: () => never[];
            defaultToolbar: boolean;
            selectedKey: string;
            maxHeight: string;
            even: boolean;
            rowClassName: string;
            cellClassName: string;
            expandIndex: number;
            rowStyle: string;
            cellStyle: string;
            defaultExpandAll: boolean;
            spanMethod: () => void;
            expandKeys: () => never[];
            loading: boolean;
            getCheckboxProps: () => void;
            getRadioProps: () => void;
            resize: boolean;
            autoColsWidth: boolean;
        }>>> & {
            [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
        }, {
            getCheckData: () => any[];
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
            id: string;
            maxHeight: string;
            resize: boolean;
            loading: boolean;
            size: string;
            selectedKey: string;
            indentSize: number;
            expandIndex: number;
            selectedKeys: string[];
            childrenColumnName: string;
            cellClassName: string | Function;
            cellStyle: string | Function;
            rowClassName: string | Function;
            rowStyle: string | Function;
            spanMethod: Function;
            defaultExpandAll: boolean;
            expandKeys: string[];
            getCheckboxProps: Function;
            getRadioProps: Function;
            dataSource: Recordable[];
            defaultToolbar: boolean | any[];
            even: boolean;
            autoColsWidth: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TableProps>, {
        id: string;
        size: string;
        indentSize: number;
        childrenColumnName: string;
        dataSource: () => never[];
        selectedKeys: () => never[];
        defaultToolbar: boolean;
        selectedKey: string;
        maxHeight: string;
        even: boolean;
        rowClassName: string;
        cellClassName: string;
        expandIndex: number;
        rowStyle: string;
        cellStyle: string;
        defaultExpandAll: boolean;
        spanMethod: () => void;
        expandKeys: () => never[];
        loading: boolean;
        getCheckboxProps: () => void;
        getRadioProps: () => void;
        resize: boolean;
        autoColsWidth: boolean;
    }>>> & {
        [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        getCheckData: () => any[];
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TableProps>, {
    id: string;
    size: string;
    indentSize: number;
    childrenColumnName: string;
    dataSource: () => never[];
    selectedKeys: () => never[];
    defaultToolbar: boolean;
    selectedKey: string;
    maxHeight: string;
    even: boolean;
    rowClassName: string;
    cellClassName: string;
    expandIndex: number;
    rowStyle: string;
    cellStyle: string;
    defaultExpandAll: boolean;
    spanMethod: () => void;
    expandKeys: () => never[];
    loading: boolean;
    getCheckboxProps: () => void;
    getRadioProps: () => void;
    resize: boolean;
    autoColsWidth: boolean;
}>>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    getCheckData: () => any[];
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
    id: string;
    maxHeight: string;
    resize: boolean;
    loading: boolean;
    size: string;
    selectedKey: string;
    indentSize: number;
    expandIndex: number;
    selectedKeys: string[];
    childrenColumnName: string;
    cellClassName: string | Function;
    cellStyle: string | Function;
    rowClassName: string | Function;
    rowStyle: string | Function;
    spanMethod: Function;
    defaultExpandAll: boolean;
    expandKeys: string[];
    getCheckboxProps: Function;
    getRadioProps: Function;
    dataSource: Recordable[];
    defaultToolbar: boolean | any[];
    even: boolean;
    autoColsWidth: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Record<any, {}> & Record<string, {
        row: any;
        data: any;
        column: any;
        rowIndex: number;
        columnIndex: number;
    }> & {
        toolbar: (_: {}) => any;
        header: (_: {}) => any;
        expand: (_: {
            data: any;
            row: any;
        }) => any;
        footer: (_: {}) => any;
    };
});
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
