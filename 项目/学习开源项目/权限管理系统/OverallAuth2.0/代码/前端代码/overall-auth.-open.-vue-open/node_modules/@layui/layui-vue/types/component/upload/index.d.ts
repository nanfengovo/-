declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            number: number;
            auto: boolean;
            cut: boolean;
            drag: boolean;
            disabled: boolean;
            multiple: boolean;
            size: number;
            onProgress: Function;
            field: string;
            modelValue: any;
            acceptMime: string;
            disabledPreview: boolean;
            cutOptions: import("./index.vue").CutOptions;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            number: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            data: {
                type: import("vue").PropType<any>;
            };
            auto: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            url: {
                type: import("vue").PropType<string>;
            };
            text: {
                type: import("vue").PropType<string>;
            };
            cut: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            drag: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            multiple: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            onProgress: {
                type: import("vue").PropType<Function>;
            } & {
                default: (event: ProgressEvent<EventTarget>) => void;
            };
            headers: {
                type: import("vue").PropType<import("../../types").Recordable>;
            };
            field: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            modelValue: {
                type: import("vue").PropType<any>;
            } & {
                default: null;
            };
            dragText: {
                type: import("vue").PropType<string>;
            };
            acceptMime: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            disabledPreview: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            cutOptions: {
                type: import("vue").PropType<import("./index.vue").CutOptions>;
            } & {
                default: undefined;
            };
            beforeUpload: {
                type: import("vue").PropType<Function>;
            };
        }>> & {
            onError?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onBefore?: ((...args: any[]) => any) | undefined;
            onDone?: ((...args: any[]) => any) | undefined;
            onChoose?: ((...args: any[]) => any) | undefined;
            onChooseAfter?: ((...args: any[]) => any) | undefined;
            onCutdone?: ((...args: any[]) => any) | undefined;
            onCutcancel?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "number" | "auto" | "cut" | "drag" | "disabled" | "multiple" | "size" | "onProgress" | "field" | "modelValue" | "acceptMime" | "disabledPreview" | "cutOptions">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "error" | "before" | "done" | "update:modelValue" | "choose" | "chooseAfter" | "cutdone" | "cutcancel", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            number: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            data: {
                type: import("vue").PropType<any>;
            };
            auto: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            url: {
                type: import("vue").PropType<string>;
            };
            text: {
                type: import("vue").PropType<string>;
            };
            cut: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            drag: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            multiple: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            onProgress: {
                type: import("vue").PropType<Function>;
            } & {
                default: (event: ProgressEvent<EventTarget>) => void;
            };
            headers: {
                type: import("vue").PropType<import("../../types").Recordable>;
            };
            field: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            modelValue: {
                type: import("vue").PropType<any>;
            } & {
                default: null;
            };
            dragText: {
                type: import("vue").PropType<string>;
            };
            acceptMime: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            disabledPreview: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            cutOptions: {
                type: import("vue").PropType<import("./index.vue").CutOptions>;
            } & {
                default: undefined;
            };
            beforeUpload: {
                type: import("vue").PropType<Function>;
            };
        }>> & {
            onError?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onBefore?: ((...args: any[]) => any) | undefined;
            onDone?: ((...args: any[]) => any) | undefined;
            onChoose?: ((...args: any[]) => any) | undefined;
            onChooseAfter?: ((...args: any[]) => any) | undefined;
            onCutdone?: ((...args: any[]) => any) | undefined;
            onCutcancel?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("error" | "before" | "done" | "update:modelValue" | "choose" | "chooseAfter" | "cutdone" | "cutcancel")[], string, {
            number: number;
            auto: boolean;
            cut: boolean;
            drag: boolean;
            disabled: boolean;
            multiple: boolean;
            size: number;
            onProgress: Function;
            field: string;
            modelValue: any;
            acceptMime: string;
            disabledPreview: boolean;
            cutOptions: import("./index.vue").CutOptions;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        number: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        data: {
            type: import("vue").PropType<any>;
        };
        auto: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        url: {
            type: import("vue").PropType<string>;
        };
        text: {
            type: import("vue").PropType<string>;
        };
        cut: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        drag: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        multiple: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        size: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        onProgress: {
            type: import("vue").PropType<Function>;
        } & {
            default: (event: ProgressEvent<EventTarget>) => void;
        };
        headers: {
            type: import("vue").PropType<import("../../types").Recordable>;
        };
        field: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<any>;
        } & {
            default: null;
        };
        dragText: {
            type: import("vue").PropType<string>;
        };
        acceptMime: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        disabledPreview: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        cutOptions: {
            type: import("vue").PropType<import("./index.vue").CutOptions>;
        } & {
            default: undefined;
        };
        beforeUpload: {
            type: import("vue").PropType<Function>;
        };
    }>> & {
        onError?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onBefore?: ((...args: any[]) => any) | undefined;
        onDone?: ((...args: any[]) => any) | undefined;
        onChoose?: ((...args: any[]) => any) | undefined;
        onChooseAfter?: ((...args: any[]) => any) | undefined;
        onCutdone?: ((...args: any[]) => any) | undefined;
        onCutcancel?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    number: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    data: {
        type: import("vue").PropType<any>;
    };
    auto: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    url: {
        type: import("vue").PropType<string>;
    };
    text: {
        type: import("vue").PropType<string>;
    };
    cut: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    drag: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    multiple: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    size: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    onProgress: {
        type: import("vue").PropType<Function>;
    } & {
        default: (event: ProgressEvent<EventTarget>) => void;
    };
    headers: {
        type: import("vue").PropType<import("../../types").Recordable>;
    };
    field: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<any>;
    } & {
        default: null;
    };
    dragText: {
        type: import("vue").PropType<string>;
    };
    acceptMime: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    disabledPreview: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    cutOptions: {
        type: import("vue").PropType<import("./index.vue").CutOptions>;
    } & {
        default: undefined;
    };
    beforeUpload: {
        type: import("vue").PropType<Function>;
    };
}>> & {
    onError?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onBefore?: ((...args: any[]) => any) | undefined;
    onDone?: ((...args: any[]) => any) | undefined;
    onChoose?: ((...args: any[]) => any) | undefined;
    onChooseAfter?: ((...args: any[]) => any) | undefined;
    onCutdone?: ((...args: any[]) => any) | undefined;
    onCutcancel?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("error" | "before" | "done" | "update:modelValue" | "choose" | "chooseAfter" | "cutdone" | "cutcancel")[], "error" | "before" | "done" | "update:modelValue" | "choose" | "chooseAfter" | "cutdone" | "cutcancel", {
    number: number;
    auto: boolean;
    cut: boolean;
    drag: boolean;
    disabled: boolean;
    multiple: boolean;
    size: number;
    onProgress: Function;
    field: string;
    modelValue: any;
    acceptMime: string;
    disabledPreview: boolean;
    cutOptions: import("./index.vue").CutOptions;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {
            disabled: boolean;
        }) => any;
        preview: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
