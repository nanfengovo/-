import "./index.less";
import { nextTick, StyleValue } from "vue";
export type PopperTrigger = "click" | "hover" | "focus" | "contextMenu";
export interface PopperProps {
    el: HTMLElement;
    position?: string;
    enterable?: boolean;
    isDark?: boolean;
    disabled?: boolean;
    isCanHide?: boolean;
    isAutoShow?: boolean;
    visible?: boolean;
    content?: string | Number;
    trigger?: PopperTrigger | PopperTrigger[];
    popperClass?: string | Array<string | object> | object;
    popperStyle?: StyleValue;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            position: string;
            visible: boolean;
            disabled: boolean;
            trigger: PopperTrigger | PopperTrigger[];
            enterable: boolean;
            isDark: boolean;
            isCanHide: boolean;
            isAutoShow: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PopperProps>, {
            position: string;
            isDark: boolean;
            disabled: boolean;
            enterable: boolean;
            isCanHide: boolean;
            isAutoShow: boolean;
            trigger: string;
            visible: boolean;
        }>>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "position" | "visible" | "disabled" | "trigger" | "enterable" | "isDark" | "isCanHide" | "isAutoShow">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PopperProps>, {
            position: string;
            isDark: boolean;
            disabled: boolean;
            enterable: boolean;
            isCanHide: boolean;
            isAutoShow: boolean;
            trigger: string;
            visible: boolean;
        }>>>, {
            hide: (e?: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            position: string;
            visible: boolean;
            disabled: boolean;
            trigger: PopperTrigger | PopperTrigger[];
            enterable: boolean;
            isDark: boolean;
            isCanHide: boolean;
            isAutoShow: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PopperProps>, {
        position: string;
        isDark: boolean;
        disabled: boolean;
        enterable: boolean;
        isCanHide: boolean;
        isAutoShow: boolean;
        trigger: string;
        visible: boolean;
    }>>> & import("vue").ShallowUnwrapRef<{
        hide: (e?: MouseEvent) => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PopperProps>, {
    position: string;
    isDark: boolean;
    disabled: boolean;
    enterable: boolean;
    isCanHide: boolean;
    isAutoShow: boolean;
    trigger: string;
    visible: boolean;
}>>>, {
    hide: (e?: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    position: string;
    visible: boolean;
    disabled: boolean;
    trigger: PopperTrigger | PopperTrigger[];
    enterable: boolean;
    isDark: boolean;
    isCanHide: boolean;
    isAutoShow: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {}) => any;
    };
});
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
