declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            collapse: string | boolean;
            tree: boolean;
            theme: string;
            collapseTransition: string | boolean;
            level: string | boolean;
            selectedKey: string;
            openKeys: string[];
            inverted: string | boolean;
            indent: string | boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            collapse: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            tree: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            collapseTransition: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            level: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            selectedKey: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            openKeys: {
                type: import("vue").PropType<string[]>;
            } & {
                default: () => never[];
            };
            inverted: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            indent: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            "onUpdate:selectedKey"?: ((...args: any[]) => any) | undefined;
            "onUpdate:openKeys"?: ((...args: any[]) => any) | undefined;
            onChangeSelectedKey?: ((...args: any[]) => any) | undefined;
            onChangeOpenKeys?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "collapse" | "tree" | "theme" | "collapseTransition" | "level" | "selectedKey" | "openKeys" | "inverted" | "indent">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "update:selectedKey" | "update:openKeys" | "changeSelectedKey" | "changeOpenKeys", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            collapse: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            tree: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            theme: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            collapseTransition: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            level: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            selectedKey: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            openKeys: {
                type: import("vue").PropType<string[]>;
            } & {
                default: () => never[];
            };
            inverted: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            indent: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            "onUpdate:selectedKey"?: ((...args: any[]) => any) | undefined;
            "onUpdate:openKeys"?: ((...args: any[]) => any) | undefined;
            onChangeSelectedKey?: ((...args: any[]) => any) | undefined;
            onChangeOpenKeys?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:selectedKey" | "update:openKeys" | "changeSelectedKey" | "changeOpenKeys")[], string, {
            collapse: string | boolean;
            tree: boolean;
            theme: string;
            collapseTransition: string | boolean;
            level: string | boolean;
            selectedKey: string;
            openKeys: string[];
            inverted: string | boolean;
            indent: string | boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        collapse: {
            type: import("vue").PropType<string | boolean>;
        } & {
            default: boolean;
        };
        tree: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        theme: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        collapseTransition: {
            type: import("vue").PropType<string | boolean>;
        } & {
            default: boolean;
        };
        level: {
            type: import("vue").PropType<string | boolean>;
        } & {
            default: boolean;
        };
        selectedKey: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        openKeys: {
            type: import("vue").PropType<string[]>;
        } & {
            default: () => never[];
        };
        inverted: {
            type: import("vue").PropType<string | boolean>;
        } & {
            default: boolean;
        };
        indent: {
            type: import("vue").PropType<string | boolean>;
        } & {
            default: boolean;
        };
    }>> & {
        "onUpdate:selectedKey"?: ((...args: any[]) => any) | undefined;
        "onUpdate:openKeys"?: ((...args: any[]) => any) | undefined;
        onChangeSelectedKey?: ((...args: any[]) => any) | undefined;
        onChangeOpenKeys?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    collapse: {
        type: import("vue").PropType<string | boolean>;
    } & {
        default: boolean;
    };
    tree: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    collapseTransition: {
        type: import("vue").PropType<string | boolean>;
    } & {
        default: boolean;
    };
    level: {
        type: import("vue").PropType<string | boolean>;
    } & {
        default: boolean;
    };
    selectedKey: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    openKeys: {
        type: import("vue").PropType<string[]>;
    } & {
        default: () => never[];
    };
    inverted: {
        type: import("vue").PropType<string | boolean>;
    } & {
        default: boolean;
    };
    indent: {
        type: import("vue").PropType<string | boolean>;
    } & {
        default: boolean;
    };
}>> & {
    "onUpdate:selectedKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:openKeys"?: ((...args: any[]) => any) | undefined;
    onChangeSelectedKey?: ((...args: any[]) => any) | undefined;
    onChangeOpenKeys?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:selectedKey" | "update:openKeys" | "changeSelectedKey" | "changeOpenKeys")[], "update:selectedKey" | "update:openKeys" | "changeSelectedKey" | "changeOpenKeys", {
    collapse: string | boolean;
    tree: boolean;
    theme: string;
    collapseTransition: string | boolean;
    level: string | boolean;
    selectedKey: string;
    openKeys: string[];
    inverted: string | boolean;
    indent: string | boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
