declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            autofocus: boolean;
            disabled: boolean;
            readonly: boolean;
            modelValue: string | number | string[] | null;
            allowClear: boolean;
            password: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            max: {
                type: import("vue").PropType<number>;
            };
            type: {
                type: import("vue").PropType<string>;
            };
            name: {
                type: import("vue").PropType<string>;
            };
            autocomplete: {
                type: import("vue").PropType<string>;
            };
            autofocus: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("./interface").InputSize>;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            placeholder: {
                type: import("vue").PropType<string>;
            };
            maxlength: {
                type: import("vue").PropType<number>;
            };
            min: {
                type: import("vue").PropType<number>;
            };
            prefixIcon: {
                type: import("vue").PropType<string>;
            };
            suffixIcon: {
                type: import("vue").PropType<string>;
            };
            modelValue: {
                type: import("vue").PropType<string | number | string[] | null>;
            } & {
                default: string;
            };
            allowClear: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            password: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            onFocus?: ((eventParam: Event) => any) | undefined;
            onBlur?: ((eventParam: Event) => any) | undefined;
            onChange?: ((value: string) => any) | undefined;
            onInput?: ((value: string) => any) | undefined;
            onClear?: (() => any) | undefined;
            "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "autofocus" | "disabled" | "readonly" | "modelValue" | "allowClear" | "password">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: ((event: "input", value: string) => void) & ((event: "clear") => void) & ((event: "blur", eventParam: Event) => void) & ((event: "change", value: string) => void) & ((event: "focus", eventParam: Event) => void) & ((event: "update:modelValue", value: string) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            max: {
                type: import("vue").PropType<number>;
            };
            type: {
                type: import("vue").PropType<string>;
            };
            name: {
                type: import("vue").PropType<string>;
            };
            autocomplete: {
                type: import("vue").PropType<string>;
            };
            autofocus: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<import("./interface").InputSize>;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            placeholder: {
                type: import("vue").PropType<string>;
            };
            maxlength: {
                type: import("vue").PropType<number>;
            };
            min: {
                type: import("vue").PropType<number>;
            };
            prefixIcon: {
                type: import("vue").PropType<string>;
            };
            suffixIcon: {
                type: import("vue").PropType<string>;
            };
            modelValue: {
                type: import("vue").PropType<string | number | string[] | null>;
            } & {
                default: string;
            };
            allowClear: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            password: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
        }>> & {
            onFocus?: ((eventParam: Event) => any) | undefined;
            onBlur?: ((eventParam: Event) => any) | undefined;
            onChange?: ((value: string) => any) | undefined;
            onInput?: ((value: string) => any) | undefined;
            onClear?: (() => any) | undefined;
            "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        }, {
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            blur: (eventParam: Event) => void;
        } & {
            input: (value: string) => void;
        } & {
            "update:modelValue": (value: string) => void;
        } & {
            change: (value: string) => void;
        } & {
            focus: (eventParam: Event) => void;
        } & {
            clear: () => void;
        }, string, {
            autofocus: boolean;
            disabled: boolean;
            readonly: boolean;
            modelValue: string | number | string[] | null;
            allowClear: boolean;
            password: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        max: {
            type: import("vue").PropType<number>;
        };
        type: {
            type: import("vue").PropType<string>;
        };
        name: {
            type: import("vue").PropType<string>;
        };
        autocomplete: {
            type: import("vue").PropType<string>;
        };
        autofocus: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("./interface").InputSize>;
        };
        readonly: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        placeholder: {
            type: import("vue").PropType<string>;
        };
        maxlength: {
            type: import("vue").PropType<number>;
        };
        min: {
            type: import("vue").PropType<number>;
        };
        prefixIcon: {
            type: import("vue").PropType<string>;
        };
        suffixIcon: {
            type: import("vue").PropType<string>;
        };
        modelValue: {
            type: import("vue").PropType<string | number | string[] | null>;
        } & {
            default: string;
        };
        allowClear: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        password: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
    }>> & {
        onFocus?: ((eventParam: Event) => any) | undefined;
        onBlur?: ((eventParam: Event) => any) | undefined;
        onChange?: ((value: string) => any) | undefined;
        onInput?: ((value: string) => any) | undefined;
        onClear?: (() => any) | undefined;
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        focus: () => void;
        blur: () => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    max: {
        type: import("vue").PropType<number>;
    };
    type: {
        type: import("vue").PropType<string>;
    };
    name: {
        type: import("vue").PropType<string>;
    };
    autocomplete: {
        type: import("vue").PropType<string>;
    };
    autofocus: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("./interface").InputSize>;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string>;
    };
    maxlength: {
        type: import("vue").PropType<number>;
    };
    min: {
        type: import("vue").PropType<number>;
    };
    prefixIcon: {
        type: import("vue").PropType<string>;
    };
    suffixIcon: {
        type: import("vue").PropType<string>;
    };
    modelValue: {
        type: import("vue").PropType<string | number | string[] | null>;
    } & {
        default: string;
    };
    allowClear: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    password: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
}>> & {
    onFocus?: ((eventParam: Event) => any) | undefined;
    onBlur?: ((eventParam: Event) => any) | undefined;
    onChange?: ((value: string) => any) | undefined;
    onInput?: ((value: string) => any) | undefined;
    onClear?: (() => any) | undefined;
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
}, {
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    blur: (eventParam: Event) => void;
} & {
    input: (value: string) => void;
} & {
    "update:modelValue": (value: string) => void;
} & {
    change: (value: string) => void;
} & {
    focus: (eventParam: Event) => void;
} & {
    clear: () => void;
}, string, {
    autofocus: boolean;
    disabled: boolean;
    readonly: boolean;
    modelValue: string | number | string[] | null;
    allowClear: boolean;
    password: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        prepend: (_: {
            disabled: boolean;
        }) => any;
        prefix: (_: {}) => any;
        suffix: (_: {}) => any;
        append: (_: {
            disabled: boolean;
        }) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
