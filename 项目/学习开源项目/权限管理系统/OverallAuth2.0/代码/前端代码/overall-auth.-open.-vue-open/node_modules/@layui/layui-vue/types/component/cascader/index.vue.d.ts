import "./index.less";
import { StyleValue } from "vue";
import { CascaderSize } from "./interface";
export type DropdownTrigger = "click" | "hover" | "focus" | "contextMenu";
export interface CascaderProps {
    options?: Array<any> | null;
    modelValue?: string;
    decollator?: string;
    placeholder?: string;
    onlyLastLevel?: boolean;
    disabled?: boolean;
    replaceFields?: {
        label: string;
        value: string;
        children: string;
    };
    allowClear?: boolean;
    size?: CascaderSize;
    trigger?: DropdownTrigger | DropdownTrigger[];
    contentClass?: string | Array<string | object> | object;
    contentStyle?: StyleValue;
    changeOnSelect?: boolean;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            options: any[] | null;
            placeholder: string;
            trigger: DropdownTrigger | DropdownTrigger[];
            modelValue: string;
            allowClear: boolean;
            replaceFields: {
                label: string;
                value: string;
                children: string;
            };
            decollator: string;
            onlyLastLevel: boolean;
            changeOnSelect: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<CascaderProps>, {
            options: null;
            modelValue: string;
            decollator: string;
            placeholder: string;
            onlyLastLevel: boolean;
            allowClear: boolean;
            disabled: boolean;
            trigger: string;
            changeOnSelect: boolean;
            replaceFields: () => {
                label: string;
                value: string;
                children: string;
            };
        }>>> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "options" | "placeholder" | "trigger" | "modelValue" | "allowClear" | "replaceFields" | "decollator" | "onlyLastLevel" | "changeOnSelect">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "clear" | "change" | "update:modelValue", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<CascaderProps>, {
            options: null;
            modelValue: string;
            decollator: string;
            placeholder: string;
            onlyLastLevel: boolean;
            allowClear: boolean;
            disabled: boolean;
            trigger: string;
            changeOnSelect: boolean;
            replaceFields: () => {
                label: string;
                value: string;
                children: string;
            };
        }>>> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "change" | "update:modelValue")[], string, {
            disabled: boolean;
            options: any[] | null;
            placeholder: string;
            trigger: DropdownTrigger | DropdownTrigger[];
            modelValue: string;
            allowClear: boolean;
            replaceFields: {
                label: string;
                value: string;
                children: string;
            };
            decollator: string;
            onlyLastLevel: boolean;
            changeOnSelect: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<CascaderProps>, {
        options: null;
        modelValue: string;
        decollator: string;
        placeholder: string;
        onlyLastLevel: boolean;
        allowClear: boolean;
        disabled: boolean;
        trigger: string;
        changeOnSelect: boolean;
        replaceFields: () => {
            label: string;
            value: string;
            children: string;
        };
    }>>> & {
        onChange?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<CascaderProps>, {
    options: null;
    modelValue: string;
    decollator: string;
    placeholder: string;
    onlyLastLevel: boolean;
    allowClear: boolean;
    disabled: boolean;
    trigger: string;
    changeOnSelect: boolean;
    replaceFields: () => {
        label: string;
        value: string;
        children: string;
    };
}>>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "change" | "update:modelValue")[], "clear" | "change" | "update:modelValue", {
    disabled: boolean;
    options: any[] | null;
    placeholder: string;
    trigger: DropdownTrigger | DropdownTrigger[];
    modelValue: string;
    allowClear: boolean;
    replaceFields: {
        label: string;
        value: string;
        children: string;
    };
    decollator: string;
    onlyLastLevel: boolean;
    changeOnSelect: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Record<any, {}> & {
        default: (_: {}) => any;
    };
});
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
