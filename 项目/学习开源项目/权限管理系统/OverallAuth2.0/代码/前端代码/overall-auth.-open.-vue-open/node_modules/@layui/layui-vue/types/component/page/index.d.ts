declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            modelValue: number;
            limit: number;
            showPage: boolean;
            showSkip: boolean;
            showCount: boolean;
            showLimit: boolean;
            showInput: boolean;
            showRefresh: boolean;
            pages: number;
            limits: number[];
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            total: {
                type: import("vue").PropType<number>;
                required: true;
            };
            modelValue: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            theme: {
                type: import("vue").PropType<string>;
            };
            limit: {
                type: import("vue").PropType<number>;
                required: true;
            } & {
                default: number;
            };
            showPage: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showSkip: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showCount: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showLimit: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showInput: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showRefresh: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            pages: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            limits: {
                type: import("vue").PropType<number[]>;
            } & {
                default: () => number[];
            };
        }>> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:limit"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "limit" | "showPage" | "showSkip" | "showCount" | "showLimit" | "showInput" | "showRefresh" | "pages" | "limits">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "change" | "update:modelValue" | "update:limit", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            total: {
                type: import("vue").PropType<number>;
                required: true;
            };
            modelValue: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            theme: {
                type: import("vue").PropType<string>;
            };
            limit: {
                type: import("vue").PropType<number>;
                required: true;
            } & {
                default: number;
            };
            showPage: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showSkip: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showCount: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showLimit: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showInput: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showRefresh: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            pages: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            limits: {
                type: import("vue").PropType<number[]>;
            } & {
                default: () => number[];
            };
        }>> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:limit"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "update:limit")[], string, {
            modelValue: number;
            limit: number;
            showPage: boolean;
            showSkip: boolean;
            showCount: boolean;
            showLimit: boolean;
            showInput: boolean;
            showRefresh: boolean;
            pages: number;
            limits: number[];
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        total: {
            type: import("vue").PropType<number>;
            required: true;
        };
        modelValue: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        theme: {
            type: import("vue").PropType<string>;
        };
        limit: {
            type: import("vue").PropType<number>;
            required: true;
        } & {
            default: number;
        };
        showPage: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        showSkip: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        showCount: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        showLimit: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        showInput: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        showRefresh: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        pages: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        limits: {
            type: import("vue").PropType<number[]>;
        } & {
            default: () => number[];
        };
    }>> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:limit"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    total: {
        type: import("vue").PropType<number>;
        required: true;
    };
    modelValue: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    theme: {
        type: import("vue").PropType<string>;
    };
    limit: {
        type: import("vue").PropType<number>;
        required: true;
    } & {
        default: number;
    };
    showPage: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    showSkip: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    showCount: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    showLimit: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    showInput: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    showRefresh: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    pages: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    limits: {
        type: import("vue").PropType<number[]>;
    } & {
        default: () => number[];
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:limit"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "update:limit")[], "change" | "update:modelValue" | "update:limit", {
    modelValue: number;
    limit: number;
    showPage: boolean;
    showSkip: boolean;
    showCount: boolean;
    showLimit: boolean;
    showInput: boolean;
    showRefresh: boolean;
    pages: number;
    limits: number[];
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        prev: (_: {}) => any;
        next: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
