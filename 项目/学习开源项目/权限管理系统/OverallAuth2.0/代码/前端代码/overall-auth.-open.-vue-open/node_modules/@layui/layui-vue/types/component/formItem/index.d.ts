declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            mode: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            required: {
                type: import("vue").PropType<boolean>;
            };
            label: {
                type: import("vue").PropType<string>;
            };
            size: {
                type: import("vue").PropType<string>;
            };
            mode: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            rules: {
                type: import("vue").PropType<import("async-validator").Rule>;
            };
            labelPosition: {
                type: import("vue").PropType<string>;
            };
            labelWidth: {
                type: import("vue").PropType<string | number>;
            };
            requiredErrorMessage: {
                type: import("vue").PropType<string>;
            };
            prop: {
                type: import("vue").PropType<string>;
            };
            errorMessage: {
                type: import("vue").PropType<string>;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "mode">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            required: {
                type: import("vue").PropType<boolean>;
            };
            label: {
                type: import("vue").PropType<string>;
            };
            size: {
                type: import("vue").PropType<string>;
            };
            mode: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            rules: {
                type: import("vue").PropType<import("async-validator").Rule>;
            };
            labelPosition: {
                type: import("vue").PropType<string>;
            };
            labelWidth: {
                type: import("vue").PropType<string | number>;
            };
            requiredErrorMessage: {
                type: import("vue").PropType<string>;
            };
            prop: {
                type: import("vue").PropType<string>;
            };
            errorMessage: {
                type: import("vue").PropType<string>;
            };
        }>>, {
            validate: (callback?: import("async-validator").ValidateCallback | undefined) => void;
            clearValidate: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            mode: string;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        required: {
            type: import("vue").PropType<boolean>;
        };
        label: {
            type: import("vue").PropType<string>;
        };
        size: {
            type: import("vue").PropType<string>;
        };
        mode: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        rules: {
            type: import("vue").PropType<import("async-validator").Rule>;
        };
        labelPosition: {
            type: import("vue").PropType<string>;
        };
        labelWidth: {
            type: import("vue").PropType<string | number>;
        };
        requiredErrorMessage: {
            type: import("vue").PropType<string>;
        };
        prop: {
            type: import("vue").PropType<string>;
        };
        errorMessage: {
            type: import("vue").PropType<string>;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        validate: (callback?: import("async-validator").ValidateCallback | undefined) => void;
        clearValidate: () => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    required: {
        type: import("vue").PropType<boolean>;
    };
    label: {
        type: import("vue").PropType<string>;
    };
    size: {
        type: import("vue").PropType<string>;
    };
    mode: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    rules: {
        type: import("vue").PropType<import("async-validator").Rule>;
    };
    labelPosition: {
        type: import("vue").PropType<string>;
    };
    labelWidth: {
        type: import("vue").PropType<string | number>;
    };
    requiredErrorMessage: {
        type: import("vue").PropType<string>;
    };
    prop: {
        type: import("vue").PropType<string>;
    };
    errorMessage: {
        type: import("vue").PropType<string>;
    };
}>>, {
    validate: (callback?: import("async-validator").ValidateCallback | undefined) => void;
    clearValidate: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    mode: string;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        required: (_: {
            props: {
                model: import("../../types").modelType;
                prop?: string | undefined;
                mode: string;
                label?: string | undefined;
                labelPosition?: string | undefined;
                labelWidth?: string | number | undefined;
                errorMessage?: string | undefined;
                rules?: import("async-validator").Rule | undefined;
                required?: boolean | undefined;
                requiredErrorMessage?: string | undefined;
                size?: string | undefined;
            };
        }) => any;
        label: (_: {
            props: {
                model: import("../../types").modelType;
                prop?: string | undefined;
                mode: string;
                label?: string | undefined;
                labelPosition?: string | undefined;
                labelWidth?: string | number | undefined;
                errorMessage?: string | undefined;
                rules?: import("async-validator").Rule | undefined;
                required?: boolean | undefined;
                requiredErrorMessage?: string | undefined;
                size?: string | undefined;
            };
        }) => any;
        default: (_: {
            props: {
                model: import("../../types").modelType;
                prop?: string | undefined;
                mode: string;
                label?: string | undefined;
                labelPosition?: string | undefined;
                labelWidth?: string | number | undefined;
                errorMessage?: string | undefined;
                rules?: import("async-validator").Rule | undefined;
                required?: boolean | undefined;
                requiredErrorMessage?: string | undefined;
                size?: string | undefined;
            };
        }) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
