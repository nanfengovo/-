import { w as t } from "../utils/index.js";
import { defineComponent as e, onMounted as n, nextTick as o } from "vue";
const r = t(e({ name: "LayWatermark", props: { content: { default: "" }, font: { default: "20px serif" }, color: { default: "rgba(184, 184, 184, 0.8)" }, rotate: { default: -45 }, height: { default: 200 }, width: { default: 200 }, elementBox: { default: "body" } }, setup(t2) {
  const e2 = t2;
  n(() => {
    o(() => {
      r2();
    });
  });
  const r2 = () => {
    const t3 = document.createElement("canvas"), n2 = document.querySelector(e2.elementBox), o2 = document.createElement("div");
    t3.setAttribute("width", `${e2.width}`), t3.setAttribute("height", `${e2.height}`);
    const r3 = t3.getContext("2d");
    r3.font = `${e2.font}`, r3.fillStyle = e2.color, r3.textAlign = "center", r3.translate(e2.width / 2, e2.height / 2), r3.rotate(Math.PI / 180 * e2.rotate), r3.fillText(e2.content, 0, 0);
    let a = `position: absolute;
                        top: 0;
                        left: 0;
                        pointer-events: none;
                        z-index: 999;
                        width: 100%;
                        height: 100%;
                        mix-blend-mode: multiply;
                        background-repeat:repeat;
                        background-image:url('${t3.toDataURL()}');
                        `;
    o2.classList.add("lay-watermark-box"), o2.setAttribute("style", a);
    new MutationObserver(() => {
      const t4 = n2.querySelector(".lay-watermark-box");
      (t4 && t4.getAttribute("style") !== a || !t4) && (t4 ? t4.setAttribute("style", a) : n2.appendChild(o2));
    }).observe(document.body, { attributes: true, subtree: true, childList: true });
  };
  return (t3, e3) => null;
} }));
export { r as default };
