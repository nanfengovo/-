import { w as e } from "../utils/index.js";
import { defineComponent as l, inject as a, ref as u, computed as d, withDirectives as i, openBlock as s, createElementBlock as t, normalizeClass as o, unref as v, createBlock as n, isRef as r, createCommentVNode as c, renderSlot as f, createTextVNode as b, toDisplayString as p, vShow as m } from "vue";
import { a as y } from "../checkbox/index2.js";
const k = l({ name: "LaySelectOption", props: { label: { default: "" }, value: null, disabled: { type: Boolean, default: false }, keyword: { default: "" } }, setup(e2) {
  const l2 = e2, k2 = a("searchValue"), x2 = a("selectRef"), h = a("searchMethod"), V = a("selectedValue"), g = a("multiple"), O = u(), w = () => {
    var _a;
    g.value ? l2.disabled || ((_a = O.value) == null ? void 0 : _a.toggle()) : l2.disabled || (x2.value.hide(), V.value = l2.value);
  }, S = d(() => g.value ? -1 != V.value.indexOf(l2.value) : V.value === l2.value), j = u(true), R = d(() => {
    var _a, _b;
    return h && !j.value ? h(k2.value, l2) : (j.value = false, ((_a = l2.keyword) == null ? void 0 : _a.toString().indexOf(k2.value)) > -1 || ((_b = l2.label) == null ? void 0 : _b.toString().indexOf(k2.value)) > -1);
  }), _ = d(() => ["layui-select-option", { "layui-this": S.value, "layui-disabled": l2.disabled }]);
  return (l3, a2) => i((s(), t("dd", { class: o(v(_)), onClick: w }, [v(g) ? (s(), n(y, { key: 0, skin: "primary", ref_key: "checkboxRef", ref: O, modelValue: v(V), "onUpdate:modelValue": a2[0] || (a2[0] = (e3) => r(V) ? V.value = e3 : null), disabled: e2.disabled, value: e2.value }, null, 8, ["modelValue", "disabled", "value"])) : c("", true), f(l3.$slots, "default", {}, () => [b(p(e2.label), 1)])], 2)), [[m, v(R)]]);
} }), x = e(k);
export { k as _, x as c };
