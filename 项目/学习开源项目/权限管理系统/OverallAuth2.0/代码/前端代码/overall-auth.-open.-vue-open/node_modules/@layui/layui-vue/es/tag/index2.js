import { w as e } from "../utils/index.js";
import { defineComponent as t, ref as a, computed as o, onMounted as r, openBlock as l, createElementBlock as s, normalizeClass as n, unref as i, normalizeStyle as c, renderSlot as d, createCommentVNode as u, createElementVNode as p, withModifiers as y, createVNode as b } from "vue";
import { _ as g } from "../checkbox/index2.js";
import { T as m } from "../_chunks/@ctrl/index.js";
const v = { key: 0, class: "layui-tag-icon" }, f = { class: "layui-tag-text" }, k = ["onClick"], h = t({ name: "LayTag", props: { type: null, color: null, closable: { type: Boolean }, size: { default: "md" }, bordered: { type: Boolean, default: true }, disabled: { type: Boolean }, shape: { default: "square" }, maxWidth: null, variant: { default: "dark" } }, emits: ["close", "check", "update:checked"], setup(e2, { emit: t2 }) {
  const h2 = e2, $2 = a(true), x = (e3) => {
    h2.disabled || t2("close", e3);
  }, w = o(() => ["layui-tag", `layui-tag-size-${h2.size}`, `layui-tag-shap-${h2.shape}`, { [`layui-tag-variant-${h2.variant}`]: h2.variant, [`layui-tag-variant-${h2.variant}-bordered`]: h2.bordered, [`layui-tag-${h2.type}-bordered`]: h2.bordered, [`layui-tag-${h2.type}`]: h2.type, "layui-tag-bordered": h2.bordered, "layui-tag-disabled": h2.disabled }]), B = o(() => {
    var _a;
    return [{ "max-width": (_a = h2.maxWidth) != null ? _a : "100%", ...(e3 = h2, o(() => {
      let t3 = {};
      if (C.value, e3.color || e3.type) {
        var a2 = void 0;
        if (e3.color)
          a2 = e3.color;
        else {
          const t4 = getComputedStyle(document.documentElement), o3 = t4.getPropertyValue(`--global-${e3.type}-color`);
          a2 = o3;
        }
        const o2 = new m(a2);
        if ("dark" === e3.variant) {
          const r2 = o2.getBrightness() < 190, l2 = r2 ? "#FFF" : "#000000";
          t3 = { "background-color": a2, "border-color": e3.bordered ? a2 : "transparent", color: l2 };
        } else
          "light" === e3.variant ? t3 = { "background-color": o2.tint(90).toString(), "border-color": e3.bordered ? o2.tint(50).toString() : "transparent", color: a2 } : "plain" === e3.variant && (t3 = { "background-color": "transparent", "border-color": e3.bordered ? a2 : "transparent", color: a2 });
      }
      return t3;
    })).value }];
    var e3;
  });
  const C = a(true);
  return r(() => {
    var e3 = void 0;
    const t3 = document.documentElement;
    new MutationObserver(function(a2) {
      for (let o2 of a2)
        if ("attributes" === o2.type && "style" === o2.attributeName) {
          const a3 = getComputedStyle(t3).getPropertyValue(`--global-${h2.type}-color`);
          (null == e3 || null != e3 && e3 != a3) && (e3 = a3, C.value = !C.value);
        }
    }).observe(t3, { attributes: true, attributeOldValue: true, attributeFilter: ["style"] });
  }), (t3, a2) => $2.value ? (l(), s("span", { key: 0, class: n(i(w)), style: c(i(B)) }, [t3.$slots.icon ? (l(), s("span", v, [d(t3.$slots, "icon")])) : u("", true), p("span", f, [d(t3.$slots, "default")]), e2.closable ? (l(), s("span", { key: 1, class: "layui-tag-close-icon", onClick: y(x, ["stop"]) }, [d(t3.$slots, "close-icon", {}, () => [b(i(g), { type: "layui-icon-close" })])], 8, k)) : u("", true)], 6)) : u("", true);
} }), $ = e(h);
export { h as _, $ as c };
