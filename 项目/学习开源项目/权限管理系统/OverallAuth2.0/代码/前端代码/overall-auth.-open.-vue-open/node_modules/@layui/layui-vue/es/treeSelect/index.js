import { g as e, w as l } from "../utils/index.js";
import { computed as a, inject as t, defineComponent as o, ref as n, watch as d, openBlock as u, createElementBlock as i, normalizeClass as s, unref as c, createVNode as r, withCtx as p, createElementVNode as m, isRef as h, createBlock as v } from "vue";
import { _ as y } from "../checkbox/index2.js";
import { _ as f } from "../input/index2.js";
import { _ as g } from "../tagInput/index2.js";
import { _ as b } from "../dropdown/index2.js";
import { _ as C } from "../tree/index2.js";
import "../tag/index2.js";
import "../_chunks/@ctrl/index.js";
import "../tooltip/index2.js";
import "../_chunks/@vueuse/index.js";
import "../transition/index2.js";
const x = { class: "layui-tree-select-content" }, V = l(o({ name: "LayTreeSelect", props: { data: null, modelValue: null, disabled: { type: Boolean, default: false }, placeholder: null, multiple: { type: Boolean, default: false }, allowClear: { type: Boolean, default: false }, collapseTagsTooltip: { type: Boolean, default: true }, minCollapsedNum: { default: 3 }, size: null, checkStrictly: { type: Boolean, default: true }, search: { type: Boolean, default: false }, contentClass: null, contentStyle: null }, emits: ["update:modelValue", "change", "search"], setup(l2, { emit: o2 }) {
  const V2 = l2, { size: k } = function(e2) {
    return { size: a(() => {
      const l3 = t("LayForm", {});
      return e2.size || l3.size || "md";
    }) };
  }(V2), w = n(), j = n(), _ = n(), z = n([]), S = n(false), T = n(), B = n(false), I = a({ get: () => V2.multiple && null == V2.modelValue ? [] : V2.modelValue, set(e2) {
    o2("update:modelValue", e2), o2("change", e2);
  } }), K = a({ get: () => V2.multiple ? V2.modelValue : [], set(e2) {
    V2.multiple && (o2("update:modelValue", e2), o2("change", e2));
  } });
  d([I, w], () => {
    if (V2.multiple)
      try {
        z.value = I.value.map((l3) => {
          var a2 = e(V2.data, l3);
          return a2 && (a2.label = a2.title, a2.value = a2.id, a2.closable = !a2.disabled), null == a2 && (a2 = { label: l3, value: l3, closable: true }), a2;
        });
      } catch (e2) {
        throw new Error("v-model / model-value is not an array type");
      }
    else {
      const l3 = e(V2.data, I.value);
      _.value = l3 ? l3.title : "";
    }
  }, { immediate: true, deep: true });
  const N = function() {
    V2.multiple ? o2("update:modelValue", []) : o2("update:modelValue", "");
  }, U = (e2) => {
    V2.multiple || (T.value.hide(), I.value = e2.id);
  }, A = (l3) => {
    if (T.value.hide(), V2.checkStrictly)
      o2("update:modelValue", K.value.filter((e2) => e2 != l3));
    else {
      const a2 = e(V2.data, l3), t2 = E(a2);
      o2("update:modelValue", K.value.filter((e2) => !t2.includes(e2)));
    }
  }, E = (e2) => {
    const l3 = [];
    return function e3(l4, a2) {
      a2.push(l4.id), l4.children && l4.children.forEach((l5) => {
        e3(l5, a2);
      });
    }(e2, l3), l3;
  }, L = a(() => Array.isArray(I) ? I.value.length > 0 : "" != I.value && null != I.value && null != I.value), R = a(() => L.value ? "" : V2.placeholder), F = (e2) => {
    B.value || (o2("search", e2), j.value = e2);
  }, H = () => {
    B.value = true;
  }, O = (e2) => {
    B.value = false, F(e2.target.value);
  };
  function q(e2, l3) {
    return e2.map((e3) => ({ ...e3 })).filter((e3) => (e3.children = e3.children && q(e3.children, l3), l3(e3) || e3.children && e3.children.length));
  }
  return d(j, () => {
    "" === j.value ? w.value = V2.data : w.value = q(V2.data, (e2) => e2.title.indexOf(j.value) > -1);
  }), d(() => V2.data, () => {
    w.value = V2.data;
  }, { immediate: true, deep: true }), (e2, a2) => (u(), i("div", { class: s(["layui-tree-select", { "layui-disabled": l2.disabled, "has-content": c(L), "has-clear": l2.allowClear }]) }, [r(b, { ref_key: "dropdownRef", ref: T, disabled: l2.disabled, contentClass: l2.contentClass, contentStyle: l2.contentStyle, "update-at-scroll": true, onShow: a2[4] || (a2[4] = (e3) => S.value = true), onHide: a2[5] || (a2[5] = (e3) => S.value = false) }, { content: p(() => [m("div", x, [r(C, { data: w.value, onlyIconControl: true, "show-checkbox": l2.multiple, "check-strictly": l2.checkStrictly, selectedKey: c(I), "onUpdate:selectedKey": a2[2] || (a2[2] = (e3) => h(I) ? I.value = e3 : null), checkedKeys: c(K), "onUpdate:checkedKeys": a2[3] || (a2[3] = (e3) => h(K) ? K.value = e3 : null), onNodeClick: U }, null, 8, ["data", "show-checkbox", "check-strictly", "selectedKey", "checkedKeys"])])]), default: p(() => [l2.multiple ? (u(), v(g, { key: 0, size: c(k), "allow-clear": l2.allowClear, placeholder: c(R), collapseTagsTooltip: l2.collapseTagsTooltip, minCollapsedNum: l2.minCollapsedNum, disabledInput: !l2.search, onInputValueChange: F, onRemove: A, onClear: N, modelValue: z.value, "onUpdate:modelValue": a2[0] || (a2[0] = (e3) => z.value = e3) }, { suffix: p(() => [r(c(y), { type: "layui-icon-triangle-d", class: s({ triangle: S.value }) }, null, 8, ["class"])]), _: 1 }, 8, ["size", "allow-clear", "placeholder", "collapseTagsTooltip", "minCollapsedNum", "disabledInput", "modelValue"])) : (u(), v(f, { key: 1, modelValue: _.value, "onUpdate:modelValue": a2[1] || (a2[1] = (e3) => _.value = e3), "allow-clear": l2.allowClear, placeholder: c(R), disabled: l2.disabled, readonly: !l2.search, size: c(k), onClear: N, onInput: F, onCompositionstart: H, onCompositionend: O }, { suffix: p(() => [r(c(y), { type: "layui-icon-triangle-d", class: s({ triangle: S.value }) }, null, 8, ["class"])]), _: 1 }, 8, ["modelValue", "allow-clear", "placeholder", "disabled", "readonly", "size"]))]), _: 1 }, 8, ["disabled", "contentClass", "contentStyle"])], 2));
} }));
export { V as default };
