import { w as e } from "../utils/index.js";
import { defineComponent as t, ref as l, watch as a, reactive as i, onUnmounted as o, onMounted as r, withDirectives as n, openBlock as s, createElementBlock as d, normalizeStyle as c, createElementVNode as u, createBlock as p, unref as f, createCommentVNode as m, toDisplayString as y, createVNode as x, withCtx as h, Fragment as v, renderList as w, createTextVNode as b, vShow as g, nextTick as k } from "vue";
import { a as W, _ as T } from "../carousel/index2.js";
import { _ as I } from "../checkbox/index2.js";
const O = { key: 1, class: "layui-notice-bar-warp-slot" }, _ = e(t({ name: "LayNoticeBar", props: { mode: null, text: { default: "" }, textlist: { default: () => [] }, color: { default: () => "var(--color-warning)" }, background: { default: () => "var(--color-warning-light-9)" }, size: { default: 14 }, height: { default: 40 }, delay: { default: 1 }, speed: { default: 100 }, scrollable: { type: Boolean, default: false }, leftIcon: null, rightIcon: null }, emits: ["close", "link"], setup(e2, { emit: t2 }) {
  var _a;
  const _2 = e2, B = l(), $ = l(), j = l((_a = _2.textlist[0]) == null ? void 0 : _a.id);
  a(() => _2.textlist, () => {
    j.value = _2.textlist[0].id;
  }, { deep: true });
  const z = i({ order: 1, oneTime: 0, twoTime: 0, warpOWidth: 0, textOWidth: 0, isMode: false, height: 40 });
  var M;
  o(() => {
    clearInterval(M), M = null;
  });
  const V = () => {
    z.oneTime = z.textOWidth / _2.speed, z.twoTime = (z.textOWidth + z.warpOWidth) / _2.speed;
  }, L = () => {
    1 === z.order ? ($.value.style.cssText = `animation: around1 ${z.oneTime}s  linear; opactity: 1;`, z.order = 2) : ($.value.style.cssText = `animation: around2 ${z.twoTime}s linear  ; opactity: 1;`, z.order = 1);
  }, R = () => {
    if (!_2.mode)
      return false;
    "closeable" === _2.mode ? (z.isMode = true, t2("close")) : "link" === _2.mode && t2("link");
  };
  return r(() => {
    if (_2.scrollable)
      return false;
    k(() => {
      z.warpOWidth = B.value.offsetWidth, z.textOWidth = $.value.offsetWidth, V(), M = setTimeout(() => {
        L();
      }, 1e3 * _2.delay);
    }), $.value.addEventListener("animationend", () => {
      L();
    }, false);
  }), (t3, l2) => n((s(), d("div", { class: "layui-notice-bar", style: c({ background: e2.background, height: `${e2.height}px` }) }, [u("div", { class: "layui-notice-bar-warp", style: c({ color: e2.color, "font-size": `${e2.size}px` }) }, [e2.leftIcon ? (s(), p(f(I), { key: 0, class: "layui-notice-bar-warp-left-icon", type: e2.leftIcon }, null, 8, ["type"])) : m("", true), u("div", { class: "layui-notice-bar-warp-text-box", ref_key: "noticeBarWarpRef", ref: B, style: c("--textWidth--:" + e2.text.length + "em") }, [e2.scrollable ? (s(), d("div", O, [x(W, { modelValue: j.value, "onUpdate:modelValue": l2[0] || (l2[0] = (e3) => j.value = e3), indicator: "none", anim: "updown", arrow: "none", style: { height: "40px" } }, { default: h(() => [(s(true), d(v, null, w(e2.textlist, (e3) => (s(), p(T, { key: e3.id, id: e3.id, class: "layui-anim layui-anim-up" }, { default: h(() => [b(y(e3.text), 1)]), _: 2 }, 1032, ["id"]))), 128))]), _: 1 }, 8, ["modelValue"])])) : (s(), d("div", { key: 0, class: "layui-notice-bar-warp-text", ref_key: "noticeBarTextRef", ref: $ }, y(e2.text), 513))], 4), e2.rightIcon ? (s(), p(f(I), { key: 1, type: e2.rightIcon, class: "layui-notice-bar-warp-right-icon", onClick: R }, null, 8, ["type"])) : m("", true)], 4)], 4)), [[g, !z.isMode]]);
} }));
export { _ as default };
