declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            replaceFields: import("./index.vue").ReplaceFieldsOptions;
            collapseTransition: boolean;
            checkedKeys: import("./tree.type").KeysType;
            showCheckbox: boolean;
            showLine: boolean;
            checkStrictly: string | boolean;
            onlyIconControl: boolean;
            tailNodeIcon: string | boolean;
            edit: import("./tree.type").EditType;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            data: {
                type: import("vue").PropType<import("./index.vue").OriginalTreeData | import("./index.vue").OriginalTreeData[]>;
                required: true;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            replaceFields: {
                type: import("vue").PropType<import("./index.vue").ReplaceFieldsOptions>;
            } & {
                default: () => {
                    id: string;
                    children: string;
                    title: string;
                };
            };
            collapseTransition: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            selectedKey: {
                type: import("vue").PropType<any>;
            };
            expandKeys: {
                type: import("vue").PropType<import("./tree.type").KeysType>;
            };
            checkedKeys: {
                type: import("vue").PropType<import("./tree.type").KeysType>;
            } & {
                default: () => never[];
            };
            showCheckbox: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showLine: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            checkStrictly: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            onlyIconControl: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            tailNodeIcon: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: string;
            };
            edit: {
                type: import("vue").PropType<import("./tree.type").EditType>;
            } & {
                default: boolean;
            };
        }>> & {
            "onUpdate:selectedKey"?: ((id: string | number) => any) | undefined;
            "onNode-click"?: ((node: import("./index.vue").OriginalTreeData) => any) | undefined;
            "onUpdate:expandKeys"?: ((keys: import("./tree.type").KeysType) => any) | undefined;
            "onUpdate:checkedKeys"?: ((keys: import("./tree.type").KeysType) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "replaceFields" | "collapseTransition" | "checkedKeys" | "showCheckbox" | "showLine" | "checkStrictly" | "onlyIconControl" | "tailNodeIcon" | "edit">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: ((event: "update:selectedKey", id: string | number) => void) & ((event: "update:expandKeys", keys: import("./tree.type").KeysType) => void) & ((event: "update:checkedKeys", keys: import("./tree.type").KeysType) => void) & ((event: "node-click", node: import("./index.vue").OriginalTreeData) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            data: {
                type: import("vue").PropType<import("./index.vue").OriginalTreeData | import("./index.vue").OriginalTreeData[]>;
                required: true;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            replaceFields: {
                type: import("vue").PropType<import("./index.vue").ReplaceFieldsOptions>;
            } & {
                default: () => {
                    id: string;
                    children: string;
                    title: string;
                };
            };
            collapseTransition: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            selectedKey: {
                type: import("vue").PropType<any>;
            };
            expandKeys: {
                type: import("vue").PropType<import("./tree.type").KeysType>;
            };
            checkedKeys: {
                type: import("vue").PropType<import("./tree.type").KeysType>;
            } & {
                default: () => never[];
            };
            showCheckbox: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            showLine: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            checkStrictly: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: boolean;
            };
            onlyIconControl: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            tailNodeIcon: {
                type: import("vue").PropType<string | boolean>;
            } & {
                default: string;
            };
            edit: {
                type: import("vue").PropType<import("./tree.type").EditType>;
            } & {
                default: boolean;
            };
        }>> & {
            "onUpdate:selectedKey"?: ((id: string | number) => any) | undefined;
            "onNode-click"?: ((node: import("./index.vue").OriginalTreeData) => any) | undefined;
            "onUpdate:expandKeys"?: ((keys: import("./tree.type").KeysType) => any) | undefined;
            "onUpdate:checkedKeys"?: ((keys: import("./tree.type").KeysType) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:expandKeys": (keys: import("./tree.type").KeysType) => void;
        } & {
            "update:checkedKeys": (keys: import("./tree.type").KeysType) => void;
        } & {
            "node-click": (node: import("./index.vue").OriginalTreeData) => void;
        } & {
            "update:selectedKey": (id: string | number) => void;
        }, string, {
            disabled: boolean;
            replaceFields: import("./index.vue").ReplaceFieldsOptions;
            collapseTransition: boolean;
            checkedKeys: import("./tree.type").KeysType;
            showCheckbox: boolean;
            showLine: boolean;
            checkStrictly: string | boolean;
            onlyIconControl: boolean;
            tailNodeIcon: string | boolean;
            edit: import("./tree.type").EditType;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        data: {
            type: import("vue").PropType<import("./index.vue").OriginalTreeData | import("./index.vue").OriginalTreeData[]>;
            required: true;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        replaceFields: {
            type: import("vue").PropType<import("./index.vue").ReplaceFieldsOptions>;
        } & {
            default: () => {
                id: string;
                children: string;
                title: string;
            };
        };
        collapseTransition: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        selectedKey: {
            type: import("vue").PropType<any>;
        };
        expandKeys: {
            type: import("vue").PropType<import("./tree.type").KeysType>;
        };
        checkedKeys: {
            type: import("vue").PropType<import("./tree.type").KeysType>;
        } & {
            default: () => never[];
        };
        showCheckbox: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        showLine: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        checkStrictly: {
            type: import("vue").PropType<string | boolean>;
        } & {
            default: boolean;
        };
        onlyIconControl: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        tailNodeIcon: {
            type: import("vue").PropType<string | boolean>;
        } & {
            default: string;
        };
        edit: {
            type: import("vue").PropType<import("./tree.type").EditType>;
        } & {
            default: boolean;
        };
    }>> & {
        "onUpdate:selectedKey"?: ((id: string | number) => any) | undefined;
        "onNode-click"?: ((node: import("./index.vue").OriginalTreeData) => any) | undefined;
        "onUpdate:expandKeys"?: ((keys: import("./tree.type").KeysType) => any) | undefined;
        "onUpdate:checkedKeys"?: ((keys: import("./tree.type").KeysType) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    data: {
        type: import("vue").PropType<import("./index.vue").OriginalTreeData | import("./index.vue").OriginalTreeData[]>;
        required: true;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    replaceFields: {
        type: import("vue").PropType<import("./index.vue").ReplaceFieldsOptions>;
    } & {
        default: () => {
            id: string;
            children: string;
            title: string;
        };
    };
    collapseTransition: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    selectedKey: {
        type: import("vue").PropType<any>;
    };
    expandKeys: {
        type: import("vue").PropType<import("./tree.type").KeysType>;
    };
    checkedKeys: {
        type: import("vue").PropType<import("./tree.type").KeysType>;
    } & {
        default: () => never[];
    };
    showCheckbox: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    showLine: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    checkStrictly: {
        type: import("vue").PropType<string | boolean>;
    } & {
        default: boolean;
    };
    onlyIconControl: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    tailNodeIcon: {
        type: import("vue").PropType<string | boolean>;
    } & {
        default: string;
    };
    edit: {
        type: import("vue").PropType<import("./tree.type").EditType>;
    } & {
        default: boolean;
    };
}>> & {
    "onUpdate:selectedKey"?: ((id: string | number) => any) | undefined;
    "onNode-click"?: ((node: import("./index.vue").OriginalTreeData) => any) | undefined;
    "onUpdate:expandKeys"?: ((keys: import("./tree.type").KeysType) => any) | undefined;
    "onUpdate:checkedKeys"?: ((keys: import("./tree.type").KeysType) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:expandKeys": (keys: import("./tree.type").KeysType) => void;
} & {
    "update:checkedKeys": (keys: import("./tree.type").KeysType) => void;
} & {
    "node-click": (node: import("./index.vue").OriginalTreeData) => void;
} & {
    "update:selectedKey": (id: string | number) => void;
}, string, {
    disabled: boolean;
    replaceFields: import("./index.vue").ReplaceFieldsOptions;
    collapseTransition: boolean;
    checkedKeys: import("./tree.type").KeysType;
    showCheckbox: boolean;
    showLine: boolean;
    checkStrictly: string | boolean;
    onlyIconControl: boolean;
    tailNodeIcon: string | boolean;
    edit: import("./tree.type").EditType;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        title: (_: {
            data: any;
        }) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
