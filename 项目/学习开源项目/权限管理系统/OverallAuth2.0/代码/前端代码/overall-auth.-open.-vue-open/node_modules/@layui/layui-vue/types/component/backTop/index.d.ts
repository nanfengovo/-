declare const component: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            circle: boolean;
            target: string;
            disabled: boolean;
            icon: string;
            showHeight: number;
            iconSize: number;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            borderRadius: {
                type: import("vue").PropType<string | number>;
            };
            bottom: {
                type: import("vue").PropType<number>;
            };
            color: {
                type: import("vue").PropType<string>;
            };
            opacity: {
                type: import("vue").PropType<number>;
            };
            position: {
                type: import("vue").PropType<"fixed" | "absolute">;
            };
            right: {
                type: import("vue").PropType<number>;
            };
            circle: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            target: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium">;
            };
            icon: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            showHeight: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            bgcolor: {
                type: import("vue").PropType<string>;
            };
            iconSize: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            iconColor: {
                type: import("vue").PropType<string>;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "circle" | "target" | "disabled" | "icon" | "showHeight" | "iconSize">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "click", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            borderRadius: {
                type: import("vue").PropType<string | number>;
            };
            bottom: {
                type: import("vue").PropType<number>;
            };
            color: {
                type: import("vue").PropType<string>;
            };
            opacity: {
                type: import("vue").PropType<number>;
            };
            position: {
                type: import("vue").PropType<"fixed" | "absolute">;
            };
            right: {
                type: import("vue").PropType<number>;
            };
            circle: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            target: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
            } & {
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium">;
            };
            icon: {
                type: import("vue").PropType<string>;
            } & {
                default: string;
            };
            showHeight: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            bgcolor: {
                type: import("vue").PropType<string>;
            };
            iconSize: {
                type: import("vue").PropType<number>;
            } & {
                default: number;
            };
            iconColor: {
                type: import("vue").PropType<string>;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], string, {
            circle: boolean;
            target: string;
            disabled: boolean;
            icon: string;
            showHeight: number;
            iconSize: number;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        borderRadius: {
            type: import("vue").PropType<string | number>;
        };
        bottom: {
            type: import("vue").PropType<number>;
        };
        color: {
            type: import("vue").PropType<string>;
        };
        opacity: {
            type: import("vue").PropType<number>;
        };
        position: {
            type: import("vue").PropType<"fixed" | "absolute">;
        };
        right: {
            type: import("vue").PropType<number>;
        };
        circle: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        target: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        } & {
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "medium">;
        };
        icon: {
            type: import("vue").PropType<string>;
        } & {
            default: string;
        };
        showHeight: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        bgcolor: {
            type: import("vue").PropType<string>;
        };
        iconSize: {
            type: import("vue").PropType<number>;
        } & {
            default: number;
        };
        iconColor: {
            type: import("vue").PropType<string>;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    borderRadius: {
        type: import("vue").PropType<string | number>;
    };
    bottom: {
        type: import("vue").PropType<number>;
    };
    color: {
        type: import("vue").PropType<string>;
    };
    opacity: {
        type: import("vue").PropType<number>;
    };
    position: {
        type: import("vue").PropType<"fixed" | "absolute">;
    };
    right: {
        type: import("vue").PropType<number>;
    };
    circle: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    target: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    } & {
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium">;
    };
    icon: {
        type: import("vue").PropType<string>;
    } & {
        default: string;
    };
    showHeight: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    bgcolor: {
        type: import("vue").PropType<string>;
    };
    iconSize: {
        type: import("vue").PropType<number>;
    } & {
        default: number;
    };
    iconColor: {
        type: import("vue").PropType<string>;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", {
    circle: boolean;
    target: string;
    disabled: boolean;
    icon: string;
    showHeight: number;
    iconSize: number;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {}) => any;
    };
}) & import("@vue/runtime-core").Plugin;
export default component;
