var r = { exports: {} };
!function(r2) {
  var t = { single_source_shortest_paths: function(r3, e, o) {
    var s = {}, u = {};
    u[e] = 0;
    var n, i, a, h, p, f, c, _ = t.PriorityQueue.make();
    for (_.push(e, 0); !_.empty(); )
      for (a in i = (n = _.pop()).value, h = n.cost, p = r3[i] || {})
        p.hasOwnProperty(a) && (f = h + p[a], c = u[a], (void 0 === u[a] || c > f) && (u[a] = f, _.push(a, f), s[a] = i));
    if (void 0 !== o && void 0 === u[o]) {
      var v = ["Could not find a path from ", e, " to ", o, "."].join("");
      throw new Error(v);
    }
    return s;
  }, extract_shortest_path_from_predecessor_list: function(r3, t2) {
    for (var e = [], o = t2; o; )
      e.push(o), r3[o], o = r3[o];
    return e.reverse(), e;
  }, find_path: function(r3, e, o) {
    var s = t.single_source_shortest_paths(r3, e, o);
    return t.extract_shortest_path_from_predecessor_list(s, o);
  }, PriorityQueue: { make: function(r3) {
    var e, o = t.PriorityQueue, s = {};
    for (e in r3 = r3 || {}, o)
      o.hasOwnProperty(e) && (s[e] = o[e]);
    return s.queue = [], s.sorter = r3.sorter || o.default_sorter, s;
  }, default_sorter: function(r3, t2) {
    return r3.cost - t2.cost;
  }, push: function(r3, t2) {
    var e = { value: r3, cost: t2 };
    this.queue.push(e), this.queue.sort(this.sorter);
  }, pop: function() {
    return this.queue.shift();
  }, empty: function() {
    return 0 === this.queue.length;
  } } };
  r2.exports = t;
}(r);
export { r as d };
