import { w as e } from "../utils/index.js";
import { defineComponent as l, ref as a, watch as o, onMounted as t, onUnmounted as u, openBlock as n, createElementBlock as s, createVNode as i, withCtx as d, unref as v, Fragment as p, createBlock as c, renderList as r, normalizeClass as m, renderSlot as f, createTextVNode as y, toDisplayString as h, createCommentVNode as k, createSlots as x, nextTick as w } from "vue";
import { _ as C } from "../dropdown/index2.js";
import { L as g } from "../dropdownMenu/index2.js";
import { _ as F } from "../dropdownMenuItem/index2.js";
import { _ } from "../input/index2.js";
import { _ as V } from "../checkbox/index2.js";
import "../_chunks/@vueuse/index.js";
const $ = { class: "lay-autocomplete" }, b = { key: 0, class: "lay-autocomplete-loading" }, j = l({ name: "LayAutocomplete", props: { modelValue: null, disabled: { type: Boolean }, fetchSuggestions: null, placeholder: null, allowClear: { type: Boolean }, name: null, autoFitWidth: { type: Boolean, default: true }, contentClass: null, contentStyle: null, replaceFields: { default: () => ({ value: "value" }) }, size: null }, emits: ["update:modelValue", "select"], setup(e2, { emit: l2 }) {
  const j2 = e2, S2 = a(false), z = a(false), B = a(j2.modelValue), E = a([]), L = a(-1), W = a(false), A = a(), I = () => {
    W.value = true;
  }, M = (e3) => {
    W.value = false, q(e3.target.value);
  };
  o(() => j2.modelValue, () => {
    B.value = j2.modelValue;
  });
  const q = function(e3) {
    if (!W.value) {
      z.value = true, A.value.show(), l2("update:modelValue", e3);
      var a2 = j2.fetchSuggestions(e3);
      void 0 === a2 ? (E.value = [], z.value = false) : a2.then((e4) => {
        E.value = e4 || [], z.value = false;
      });
    }
  }, D = function() {
    l2("update:modelValue", ""), E.value.length > 0 && (E.value = []);
  };
  o(E, () => {
    0 === E.value.length && A.value.hide();
  });
  const R = function() {
    w(() => {
      A.value.hide();
    });
  }, U = function() {
    S2.value = true;
  }, G = function() {
    S2.value = false;
  };
  return o([B, E], () => {
    let e3 = false;
    null != B.value && "" != B.value && E.value.forEach((l3, a2) => {
      B.value === l3[j2.replaceFields.value] && (L.value = a2, e3 = true);
    }), false === e3 && (L.value = -1);
  }), t(() => {
    document.addEventListener("keyup", function(e3) {
      if (true === S2.value && ("ArrowDown" === e3.key && L.value <= E.value.length - 2 && L.value++, "ArrowUp" === e3.key && L.value > 0 && L.value--, "Enter" === e3.key && -1 != L.value)) {
        const e4 = E.value[L.value];
        B.value = e4[j2.replaceFields.value], A.value.hide(), l2("update:modelValue", e4.value), l2("select", e4);
      }
    });
  }), u(() => {
    document.removeEventListener("keyup", function() {
    });
  }), (a2, o2) => (n(), s("div", $, [i(C, { ref_key: "dropdownRef", ref: A, disabled: e2.disabled, autoFitWidth: e2.autoFitWidth, contentClass: e2.contentClass, contentStyle: e2.contentStyle, "update-at-scroll": true }, { content: d(() => [z.value ? (n(), s("div", b, [i(v(V), { type: "layui-icon-loading", class: "layui-anim layui-anim-rotate layui-anim-loop" })])) : (n(), s(p, { key: 1 }, [E.value.length > 0 ? (n(), c(g, { key: 0, class: "lay-autocomplete-content" }, { default: d(() => [(n(true), s(p, null, r(E.value, (o3, t2) => (n(), c(F, { onClick: (e3) => function(e4) {
    B.value = e4[j2.replaceFields.value], l2("update:modelValue", e4.value), l2("select", e4);
  }(o3), class: m(["lay-autocomplete-option", { selected: L.value == t2, equals: B.value == o3[e2.replaceFields.value] }]) }, { default: d(() => [f(a2.$slots, "default", { option: o3 }, () => [y(h(o3.value), 1)])]), _: 2 }, 1032, ["onClick", "class"]))), 256))]), _: 3 })) : k("", true)], 64))]), default: d(() => [i(_, { name: e2.name, size: e2.size, "model-value": B.value, "allow-clear": e2.allowClear, disabled: e2.disabled, placeholder: e2.placeholder, onClick: R, onBlur: G, onFocus: U, onInput: q, onClear: D, onCompositionstart: I, onCompositionend: M }, x({ _: 2 }, [a2.$slots.prefix ? { name: "prefix", fn: d(() => [f(a2.$slots, "prefix")]), key: "0" } : void 0, a2.$slots.suffix ? { name: "suffix", fn: d(() => [f(a2.$slots, "suffix")]), key: "1" } : void 0, a2.$slots.prepend ? { name: "prepend", fn: d(() => [f(a2.$slots, "prepend")]), key: "2" } : void 0, a2.$slots.append ? { name: "append", fn: d(() => [f(a2.$slots, "append")]), key: "3" } : void 0]), 1032, ["name", "size", "model-value", "allow-clear", "disabled", "placeholder"])]), _: 3 }, 8, ["disabled", "autoFitWidth", "contentClass", "contentStyle"])]));
} }), S = e(j);
export { S as default };
