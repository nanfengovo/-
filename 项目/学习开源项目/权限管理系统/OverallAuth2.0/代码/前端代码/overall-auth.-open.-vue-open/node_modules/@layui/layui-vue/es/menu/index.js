import { w as e } from "../utils/index.js";
import { defineComponent as l, computed as t, ref as a, watch as n, provide as s, openBlock as o, createElementBlock as p, normalizeClass as i, renderSlot as d } from "vue";
import { p as u } from "../useLevel/index.js";
const r = e(l({ name: "LayMenu", props: { selectedKey: { default: "" }, openKeys: { default: () => [] }, tree: { type: Boolean, default: false }, theme: { default: "dark" }, inverted: { type: [Boolean, String], default: false }, level: { type: [Boolean, String], default: true }, collapse: { type: [Boolean, String], default: false }, collapseTransition: { type: [Boolean, String], default: true }, indent: { type: [Boolean, String], default: false } }, emits: ["update:selectedKey", "update:openKeys", "changeSelectedKey", "changeOpenKeys"], setup(e2, { emit: l2 }) {
  const r2 = e2, y = t(() => r2.tree), c = t(() => r2.collapse), v = t(() => r2.collapseTransition), K = a(r2.openKeys), f = t(() => r2.theme), m = t({ get: () => r2.collapse ? [] : r2.openKeys, set(e3) {
    l2("update:openKeys", e3), l2("changeOpenKeys", e3);
  } }), g = t({ get: () => r2.selectedKey, set(e3) {
    l2("update:selectedKey", e3), l2("changeSelectedKey", e3);
  } }), h = t(() => r2.indent);
  return n(() => r2.collapse, () => {
    r2.collapse ? (K.value = r2.openKeys, m.value = []) : m.value = K.value;
  }), u(1), s("isTree", y), s("selectedKey", g), s("openKeys", m), s("isCollapse", c), s("isCollapseTransition", v), s("menuTheme", f), s("indent", h), (l3, t2) => (o(), p("ul", { class: i(["layui-nav", [e2.level ? "" : "not-level", e2.inverted ? "inverted" : "", e2.tree ? "layui-nav-tree" : "", "dark" === e2.theme ? "layui-nav-dark" : "layui-nav-light", e2.collapse ? "layui-nav-collapse" : ""]]) }, [d(l3.$slots, "default")], 2));
} }));
export { r as default };
