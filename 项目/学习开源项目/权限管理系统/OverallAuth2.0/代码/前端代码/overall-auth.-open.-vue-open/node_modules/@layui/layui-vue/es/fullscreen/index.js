import { w as e } from "../utils/index.js";
import { defineComponent as l, ref as n, computed as t, onMounted as r, onBeforeUnmount as u, renderSlot as s } from "vue";
const c = l({ name: "LayFullscreen", props: { target: null, immersive: { type: Boolean, default: true }, position: null, zIndex: null }, emits: ["fullscreenchange"], setup(e2, { emit: l2 }) {
  const c2 = e2, o2 = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"], ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror"], ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]], i = document.documentElement;
  let a = n(c2.target || i);
  const m = n(false);
  let f = false;
  const v = o2[0], d = {};
  for (const e3 of o2)
    if (e3[1] in document) {
      for (const [l3, n2] of e3.entries())
        d[v[l3]] = n2;
      f = true;
      break;
    }
  async function F(e3) {
    if (!f)
      return;
    e3 || (e3 = b.value || i);
    let n2 = null;
    return c2.immersive ? n2 = Promise.resolve(e3[d.requestFullscreen]()) : (k(e3, false), n2 = Promise.resolve(e3 == null ? void 0 : e3.classList.add("layui-fullscreen"))), await (n2 == null ? void 0 : n2.then(() => (m.value = true, l2("fullscreenchange", m.value), !!document.fullscreenElement)));
  }
  async function E(e3) {
    if (!f)
      return;
    e3 || (e3 = b.value || document);
    let n2 = null;
    if (c2.immersive)
      n2 = Promise.resolve(document[d.exitFullscreen]());
    else {
      if (e3 instanceof Document)
        return;
      k(e3, true), n2 = Promise.resolve(e3 == null ? void 0 : e3.classList.remove("layui-fullscreen"));
    }
    return await (n2 == null ? void 0 : n2.then(() => (m.value = false, l2("fullscreenchange", m.value), !!document.fullscreenElement)));
  }
  async function w() {
    m.value ? await E(b.value) : await F(b.value);
  }
  const k = function(e3, l3 = false) {
    e3.style.position = l3 ? "" : c2.position || "", e3.style.zIndex = l3 ? "" : c2.zIndex || "";
  }, b = t(() => a.value = c2.target), g = function(e3) {
    m.value && !document.fullscreenElement && (c2.immersive ? (m.value = false, l2("fullscreenchange", m.value)) : "Escape" === e3.key && E(b.value));
  }, y = function(e3) {
    let l3 = c2.immersive && (!b.value || b.value === i);
    "F11" === e3.key && l3 && (e3.preventDefault(), w());
  };
  return r(() => {
    document.addEventListener(d.fullscreenchange, g), document.addEventListener("keydown", g), document.addEventListener("keydown", y);
  }), u(() => {
    document.removeEventListener(d.fullscreenchange, g), document.removeEventListener("keydown", g), document.removeEventListener("keydown", y);
  }), (e3, l3) => s(e3.$slots, "default", { isFullscreen: m.value, enter: F, exit: E, toggle: w });
} }), o = e(c);
export { o as default };
