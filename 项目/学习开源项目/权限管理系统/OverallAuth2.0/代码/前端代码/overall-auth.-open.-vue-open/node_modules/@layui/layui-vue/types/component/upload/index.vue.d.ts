import "./index.less";
import { Recordable } from "../../types";
import { nextTick } from "vue";
import Cropper from "cropperjs";
export interface LayerButton {
    text: string;
    callback: Function;
}
export interface LayerModal {
    title?: string;
    resize?: boolean;
    move?: boolean;
    maxmin?: boolean;
    offset?: string[];
    content?: string;
    shade?: boolean;
    shadeClose?: boolean;
    shadeOpacity?: number;
    zIndex?: number;
    type?: "component" | "iframe";
    closeBtn?: boolean;
    area?: string[];
    btn?: LayerButton[];
    btnAlign?: "l" | "r" | "c";
    anim?: boolean;
    isOutAnim?: boolean;
}
export interface CutOptions {
    layerOption?: LayerModal;
    copperOption?: Cropper.Options;
}
export interface UploadProps {
    url?: string;
    data?: any;
    headers?: Recordable;
    acceptMime?: string;
    field?: string;
    size?: number;
    multiple?: boolean;
    number?: number;
    drag?: boolean;
    disabled?: boolean;
    disabledPreview?: boolean;
    cut?: boolean;
    cutOptions?: CutOptions;
    text?: string;
    dragText?: string;
    modelValue?: any;
    auto?: boolean;
    beforeUpload?: Function;
    onProgress?: Function;
}
/**
 * 裁剪窗体的确认操作, 获取裁剪结果, 并根据 props.auto 决定是否上传。
 */
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            number: number;
            auto: boolean;
            cut: boolean;
            drag: boolean;
            disabled: boolean;
            multiple: boolean;
            size: number;
            onProgress: Function;
            field: string;
            modelValue: any;
            acceptMime: string;
            disabledPreview: boolean;
            cutOptions: CutOptions;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<UploadProps>, {
            field: string;
            acceptMime: string;
            size: number;
            multiple: boolean;
            number: number;
            drag: boolean;
            disabled: boolean;
            disabledPreview: boolean;
            cut: boolean;
            cutOptions: undefined;
            modelValue: null;
            auto: boolean;
            onProgress: (event: ProgressEvent) => void;
        }>>> & {
            onError?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onBefore?: ((...args: any[]) => any) | undefined;
            onDone?: ((...args: any[]) => any) | undefined;
            onChoose?: ((...args: any[]) => any) | undefined;
            onChooseAfter?: ((...args: any[]) => any) | undefined;
            onCutdone?: ((...args: any[]) => any) | undefined;
            onCutcancel?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "number" | "auto" | "cut" | "drag" | "disabled" | "multiple" | "size" | "onProgress" | "field" | "modelValue" | "acceptMime" | "disabledPreview" | "cutOptions">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "error" | "before" | "done" | "update:modelValue" | "choose" | "chooseAfter" | "cutdone" | "cutcancel", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<UploadProps>, {
            field: string;
            acceptMime: string;
            size: number;
            multiple: boolean;
            number: number;
            drag: boolean;
            disabled: boolean;
            disabledPreview: boolean;
            cut: boolean;
            cutOptions: undefined;
            modelValue: null;
            auto: boolean;
            onProgress: (event: ProgressEvent) => void;
        }>>> & {
            onError?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onBefore?: ((...args: any[]) => any) | undefined;
            onDone?: ((...args: any[]) => any) | undefined;
            onChoose?: ((...args: any[]) => any) | undefined;
            onChooseAfter?: ((...args: any[]) => any) | undefined;
            onCutdone?: ((...args: any[]) => any) | undefined;
            onCutcancel?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("error" | "before" | "done" | "update:modelValue" | "choose" | "chooseAfter" | "cutdone" | "cutcancel")[], string, {
            number: number;
            auto: boolean;
            cut: boolean;
            drag: boolean;
            disabled: boolean;
            multiple: boolean;
            size: number;
            onProgress: Function;
            field: string;
            modelValue: any;
            acceptMime: string;
            disabledPreview: boolean;
            cutOptions: CutOptions;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<UploadProps>, {
        field: string;
        acceptMime: string;
        size: number;
        multiple: boolean;
        number: number;
        drag: boolean;
        disabled: boolean;
        disabledPreview: boolean;
        cut: boolean;
        cutOptions: undefined;
        modelValue: null;
        auto: boolean;
        onProgress: (event: ProgressEvent) => void;
    }>>> & {
        onError?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onBefore?: ((...args: any[]) => any) | undefined;
        onDone?: ((...args: any[]) => any) | undefined;
        onChoose?: ((...args: any[]) => any) | undefined;
        onChooseAfter?: ((...args: any[]) => any) | undefined;
        onCutdone?: ((...args: any[]) => any) | undefined;
        onCutcancel?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<UploadProps>, {
    field: string;
    acceptMime: string;
    size: number;
    multiple: boolean;
    number: number;
    drag: boolean;
    disabled: boolean;
    disabledPreview: boolean;
    cut: boolean;
    cutOptions: undefined;
    modelValue: null;
    auto: boolean;
    onProgress: (event: ProgressEvent) => void;
}>>> & {
    onError?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onBefore?: ((...args: any[]) => any) | undefined;
    onDone?: ((...args: any[]) => any) | undefined;
    onChoose?: ((...args: any[]) => any) | undefined;
    onChooseAfter?: ((...args: any[]) => any) | undefined;
    onCutdone?: ((...args: any[]) => any) | undefined;
    onCutcancel?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("error" | "before" | "done" | "update:modelValue" | "choose" | "chooseAfter" | "cutdone" | "cutcancel")[], "error" | "before" | "done" | "update:modelValue" | "choose" | "chooseAfter" | "cutdone" | "cutcancel", {
    number: number;
    auto: boolean;
    cut: boolean;
    drag: boolean;
    disabled: boolean;
    multiple: boolean;
    size: number;
    onProgress: Function;
    field: string;
    modelValue: any;
    acceptMime: string;
    disabledPreview: boolean;
    cutOptions: CutOptions;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {
            disabled: boolean;
        }) => any;
        preview: (_: {}) => any;
    };
});
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
