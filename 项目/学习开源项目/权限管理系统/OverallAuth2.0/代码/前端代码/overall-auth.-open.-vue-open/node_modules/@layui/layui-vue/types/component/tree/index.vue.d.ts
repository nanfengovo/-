import { nextTick } from "vue";
import { StringFn, StringOrNumber, KeysType, EditType } from "./tree.type";
import "./index.less";
export interface OriginalTreeData {
    title: StringFn | string;
    id: StringOrNumber;
    children?: OriginalTreeData[];
    disabled?: boolean;
}
export interface ReplaceFieldsOptions {
    id?: string;
    children?: string;
    title?: string;
}
export interface TreeProps {
    data: OriginalTreeData | OriginalTreeData[];
    disabled?: boolean;
    edit?: EditType;
    checkedKeys?: KeysType;
    expandKeys?: KeysType;
    checkStrictly?: boolean | string;
    collapseTransition?: boolean;
    onlyIconControl?: boolean;
    selectedKey?: any;
    showLine?: boolean;
    showCheckbox?: boolean;
    replaceFields?: ReplaceFieldsOptions;
    tailNodeIcon?: string | boolean;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            replaceFields: ReplaceFieldsOptions;
            collapseTransition: boolean;
            checkedKeys: KeysType;
            showCheckbox: boolean;
            showLine: boolean;
            checkStrictly: string | boolean;
            onlyIconControl: boolean;
            tailNodeIcon: string | boolean;
            edit: EditType;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TreeProps>, {
            checkedKeys: () => never[];
            showCheckbox: boolean;
            edit: boolean;
            collapseTransition: boolean;
            checkStrictly: boolean;
            onlyIconControl: boolean;
            disabled: boolean;
            showLine: boolean;
            tailNodeIcon: string;
            replaceFields: () => {
                id: string;
                children: string;
                title: string;
            };
        }>>> & {
            "onUpdate:selectedKey"?: ((id: string | number) => any) | undefined;
            "onNode-click"?: ((node: OriginalTreeData) => any) | undefined;
            "onUpdate:expandKeys"?: ((keys: KeysType) => any) | undefined;
            "onUpdate:checkedKeys"?: ((keys: KeysType) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "replaceFields" | "collapseTransition" | "checkedKeys" | "showCheckbox" | "showLine" | "checkStrictly" | "onlyIconControl" | "tailNodeIcon" | "edit">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: ((event: "update:selectedKey", id: string | number) => void) & ((event: "update:expandKeys", keys: KeysType) => void) & ((event: "update:checkedKeys", keys: KeysType) => void) & ((event: "node-click", node: OriginalTreeData) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TreeProps>, {
            checkedKeys: () => never[];
            showCheckbox: boolean;
            edit: boolean;
            collapseTransition: boolean;
            checkStrictly: boolean;
            onlyIconControl: boolean;
            disabled: boolean;
            showLine: boolean;
            tailNodeIcon: string;
            replaceFields: () => {
                id: string;
                children: string;
                title: string;
            };
        }>>> & {
            "onUpdate:selectedKey"?: ((id: string | number) => any) | undefined;
            "onNode-click"?: ((node: OriginalTreeData) => any) | undefined;
            "onUpdate:expandKeys"?: ((keys: KeysType) => any) | undefined;
            "onUpdate:checkedKeys"?: ((keys: KeysType) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:expandKeys": (keys: KeysType) => void;
        } & {
            "update:checkedKeys": (keys: KeysType) => void;
        } & {
            "node-click": (node: OriginalTreeData) => void;
        } & {
            "update:selectedKey": (id: string | number) => void;
        }, string, {
            disabled: boolean;
            replaceFields: ReplaceFieldsOptions;
            collapseTransition: boolean;
            checkedKeys: KeysType;
            showCheckbox: boolean;
            showLine: boolean;
            checkStrictly: string | boolean;
            onlyIconControl: boolean;
            tailNodeIcon: string | boolean;
            edit: EditType;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TreeProps>, {
        checkedKeys: () => never[];
        showCheckbox: boolean;
        edit: boolean;
        collapseTransition: boolean;
        checkStrictly: boolean;
        onlyIconControl: boolean;
        disabled: boolean;
        showLine: boolean;
        tailNodeIcon: string;
        replaceFields: () => {
            id: string;
            children: string;
            title: string;
        };
    }>>> & {
        "onUpdate:selectedKey"?: ((id: string | number) => any) | undefined;
        "onNode-click"?: ((node: OriginalTreeData) => any) | undefined;
        "onUpdate:expandKeys"?: ((keys: KeysType) => any) | undefined;
        "onUpdate:checkedKeys"?: ((keys: KeysType) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TreeProps>, {
    checkedKeys: () => never[];
    showCheckbox: boolean;
    edit: boolean;
    collapseTransition: boolean;
    checkStrictly: boolean;
    onlyIconControl: boolean;
    disabled: boolean;
    showLine: boolean;
    tailNodeIcon: string;
    replaceFields: () => {
        id: string;
        children: string;
        title: string;
    };
}>>> & {
    "onUpdate:selectedKey"?: ((id: string | number) => any) | undefined;
    "onNode-click"?: ((node: OriginalTreeData) => any) | undefined;
    "onUpdate:expandKeys"?: ((keys: KeysType) => any) | undefined;
    "onUpdate:checkedKeys"?: ((keys: KeysType) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:expandKeys": (keys: KeysType) => void;
} & {
    "update:checkedKeys": (keys: KeysType) => void;
} & {
    "node-click": (node: OriginalTreeData) => void;
} & {
    "update:selectedKey": (id: string | number) => void;
}, string, {
    disabled: boolean;
    replaceFields: ReplaceFieldsOptions;
    collapseTransition: boolean;
    checkedKeys: KeysType;
    showCheckbox: boolean;
    showLine: boolean;
    checkStrictly: string | boolean;
    onlyIconControl: boolean;
    tailNodeIcon: string | boolean;
    edit: EditType;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        title: (_: {
            data: any;
        }) => any;
    };
});
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
