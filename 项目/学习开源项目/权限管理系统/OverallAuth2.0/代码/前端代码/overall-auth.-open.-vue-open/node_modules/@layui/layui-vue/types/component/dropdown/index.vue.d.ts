import "./index.less";
import { StyleValue } from "vue";
import { nextTick } from "vue";
import { DropdownPlacement } from "./interface";
export type DropdownTrigger = "click" | "hover" | "focus" | "contextMenu";
export interface DropdownProps {
    visible?: boolean;
    trigger?: DropdownTrigger | DropdownTrigger[];
    placement?: DropdownPlacement;
    disabled?: boolean;
    disabledTeleport?: boolean;
    autoFitPosition?: boolean;
    autoFitWidth?: boolean;
    autoFitMinWidth?: boolean;
    updateAtScroll?: boolean;
    autoFixPosition?: boolean;
    clickToClose?: boolean;
    blurToClose?: boolean;
    clickOutsideToClose?: boolean;
    contentOffset?: number;
    mouseEnterDelay?: number;
    mouseLeaveDelay?: number;
    focusDelay?: number;
    alignPoint?: boolean;
    contentClass?: string | Array<string | object> | object;
    contentStyle?: StyleValue;
    popupContainer?: string | undefined;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            visible: boolean;
            disabled: boolean;
            trigger: DropdownTrigger | DropdownTrigger[];
            placement: DropdownPlacement;
            disabledTeleport: boolean;
            autoFitPosition: boolean;
            autoFitWidth: boolean;
            autoFitMinWidth: boolean;
            updateAtScroll: boolean;
            autoFixPosition: boolean;
            clickToClose: boolean;
            blurToClose: boolean;
            clickOutsideToClose: boolean;
            contentOffset: number;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            alignPoint: boolean;
            popupContainer: string;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DropdownProps>, {
            visible: boolean;
            trigger: string;
            disabled: boolean;
            disabledTeleport: boolean;
            placement: string;
            autoFitPosition: boolean;
            autoFitMinWidth: boolean;
            autoFitWidth: boolean;
            updateAtScroll: boolean;
            autoFixPosition: boolean;
            clickToClose: boolean;
            blurToClose: boolean;
            clickOutsideToClose: boolean;
            contentOffset: number;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            alignPoint: boolean;
            popupContainer: string;
        }>>> & {
            onHide?: ((...args: any[]) => any) | undefined;
            onShow?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "visible" | "disabled" | "trigger" | "placement" | "disabledTeleport" | "autoFitPosition" | "autoFitWidth" | "autoFitMinWidth" | "updateAtScroll" | "autoFixPosition" | "clickToClose" | "blurToClose" | "clickOutsideToClose" | "contentOffset" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "alignPoint" | "popupContainer">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: (event: "hide" | "show", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DropdownProps>, {
            visible: boolean;
            trigger: string;
            disabled: boolean;
            disabledTeleport: boolean;
            placement: string;
            autoFitPosition: boolean;
            autoFitMinWidth: boolean;
            autoFitWidth: boolean;
            updateAtScroll: boolean;
            autoFixPosition: boolean;
            clickToClose: boolean;
            blurToClose: boolean;
            clickOutsideToClose: boolean;
            contentOffset: number;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            alignPoint: boolean;
            popupContainer: string;
        }>>> & {
            onHide?: ((...args: any[]) => any) | undefined;
            onShow?: ((...args: any[]) => any) | undefined;
        }, {
            show: (delay?: number) => void;
            hide: (delay?: number) => void;
            toggle: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("hide" | "show")[], string, {
            visible: boolean;
            disabled: boolean;
            trigger: DropdownTrigger | DropdownTrigger[];
            placement: DropdownPlacement;
            disabledTeleport: boolean;
            autoFitPosition: boolean;
            autoFitWidth: boolean;
            autoFitMinWidth: boolean;
            updateAtScroll: boolean;
            autoFixPosition: boolean;
            clickToClose: boolean;
            blurToClose: boolean;
            clickOutsideToClose: boolean;
            contentOffset: number;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            alignPoint: boolean;
            popupContainer: string;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DropdownProps>, {
        visible: boolean;
        trigger: string;
        disabled: boolean;
        disabledTeleport: boolean;
        placement: string;
        autoFitPosition: boolean;
        autoFitMinWidth: boolean;
        autoFitWidth: boolean;
        updateAtScroll: boolean;
        autoFixPosition: boolean;
        clickToClose: boolean;
        blurToClose: boolean;
        clickOutsideToClose: boolean;
        contentOffset: number;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        alignPoint: boolean;
        popupContainer: string;
    }>>> & {
        onHide?: ((...args: any[]) => any) | undefined;
        onShow?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        show: (delay?: number) => void;
        hide: (delay?: number) => void;
        toggle: () => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<DropdownProps>, {
    visible: boolean;
    trigger: string;
    disabled: boolean;
    disabledTeleport: boolean;
    placement: string;
    autoFitPosition: boolean;
    autoFitMinWidth: boolean;
    autoFitWidth: boolean;
    updateAtScroll: boolean;
    autoFixPosition: boolean;
    clickToClose: boolean;
    blurToClose: boolean;
    clickOutsideToClose: boolean;
    contentOffset: number;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    focusDelay: number;
    alignPoint: boolean;
    popupContainer: string;
}>>> & {
    onHide?: ((...args: any[]) => any) | undefined;
    onShow?: ((...args: any[]) => any) | undefined;
}, {
    show: (delay?: number) => void;
    hide: (delay?: number) => void;
    toggle: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("hide" | "show")[], "hide" | "show", {
    visible: boolean;
    disabled: boolean;
    trigger: DropdownTrigger | DropdownTrigger[];
    placement: DropdownPlacement;
    disabledTeleport: boolean;
    autoFitPosition: boolean;
    autoFitWidth: boolean;
    autoFitMinWidth: boolean;
    updateAtScroll: boolean;
    autoFixPosition: boolean;
    clickToClose: boolean;
    blurToClose: boolean;
    clickOutsideToClose: boolean;
    contentOffset: number;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    focusDelay: number;
    alignPoint: boolean;
    popupContainer: string;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        content: (_: {}) => any;
    };
});
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
