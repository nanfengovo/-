import { w as e } from "../utils/index.js";
import { defineComponent as t, ref as l, onMounted as a, watch as i, provide as s, openBlock as r, createElementBlock as n, mergeProps as u, unref as o, toHandlers as f, renderSlot as v } from "vue";
import { f as p } from "../_chunks/@vueuse/index.js";
const m = t({ name: "LaySplitPanel", props: { vertical: { type: Boolean, default: false }, minSize: { default: 50 } }, setup(e2) {
  const t2 = e2, m2 = l(), { pressed: g2 } = p({ target: m2 });
  let y = l(), c = l(g2), S = l();
  a(() => {
    const e3 = m2.value.offsetWidth, l2 = m2.value.offsetHeight;
    m2.value.addEventListener("mousemove", (a2) => {
      if (c.value && y.value) {
        const i2 = y.value.target.previousElementSibling, s2 = y.value.target.nextElementSibling;
        if (t2.vertical) {
          const e4 = y.value.target.previousElementSibling.offsetTop, r2 = y.value.target.previousElementSibling.offsetHeight, n2 = y.value.target.nextElementSibling.offsetHeight, u2 = l2 - (r2 + n2 + 5), o2 = (r2 + n2 + 5) / l2 * 100;
          if (a2.layerY - e4 < t2.minSize || l2 - (a2.layerY - e4) - u2 < t2.minSize)
            return false;
          i2.style.flexBasis = (a2.layerY - e4) / (r2 + n2 + 5) * o2 + "%", s2.style.flexBasis = (l2 - (a2.layerY - e4) - u2) / (r2 + n2 + 5) * o2 + "%";
        } else {
          const l3 = y.value.target.previousElementSibling.offsetLeft, r2 = y.value.target.previousElementSibling.offsetWidth, n2 = y.value.target.nextElementSibling.offsetWidth, u2 = e3 - (r2 + n2 + 5), o2 = (r2 + n2 + 5) / e3 * 100;
          if (a2.layerX - l3 < t2.minSize || e3 - (a2.layerX - l3) - u2 < t2.minSize)
            return false;
          i2.style.flexBasis = (a2.layerX - l3) / (r2 + n2 + 5) * o2 + "%", s2.style.flexBasis = (e3 - (a2.layerX - l3) - u2) / (r2 + n2 + 5) * o2 + "%";
        }
      }
    });
  });
  const d = () => {
    c.value = false, y.value = null, S.value = false;
  }, x = l([]);
  return i(x, () => {
    x.value.forEach((e3, t3) => {
      e3.setIndex(t3);
    });
  }), s("laySplitPanel", { props: t2, steps: x, target: m2, moveChange: (e3, t3, l2) => {
    y.value = e3, c.value = t3, S.value = l2;
  } }), (t3, l2) => (r(), n("div", u({ ref_key: "target", ref: m2, class: ["lay-split-panel", e2.vertical ? "lay-split-panel-vertical" : ""], style: { cursor: o(c) ? e2.vertical ? "row-resize" : "col-resize" : "" } }, f({ mouseup: d }, true)), [v(t3.$slots, "default")], 16));
} }), g = e(m);
export { g as default };
