/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarkmapToCsvPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MarkmapToCsvPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("loading MarkmapToCSVPlugin");
    this.addCommand({
      id: "convert-markmap-to-csv",
      name: "Convert Markmap to CSV",
      checkCallback: (checking) => {
        const file = this.app.workspace.getActiveFile();
        if (!file || file.extension !== "md") {
          return false;
        }
        if (!checking) {
          this.app.vault.read(file).then(
            async (markdownData) => {
              const csvData = this.convertMarkmapToCSV(markdownData);
              await this.saveCsvToFile(file, csvData);
            }
          ).catch((err) => {
            new import_obsidian.Notice(`ERROR: failed to read file ${file.basename}`);
            throw err;
          });
        }
        return true;
      }
    });
  }
  onunload() {
  }
  convertMarkmapToCSV(data) {
    var _a;
    const markmapData = data.replace(/^---[\s\S]*?---\n/, "");
    const lines = markmapData.trim().split("\n");
    const csvRows = [];
    let stack = [];
    let currentDepth = 0;
    for (const line of lines) {
      if (line.startsWith("#")) {
        const headerLevel = ((_a = line.match(/^#+/)) == null ? void 0 : _a[0].length) || 1;
        if (headerLevel == 1) {
          stack = [];
        }
        if (stack.length > headerLevel) {
          const newData = stack.join(",");
          csvRows.push(newData);
          stack = stack.slice(0, headerLevel - 1);
        } else if (stack.length === headerLevel) {
          const newData = stack.join(",");
          csvRows.push(newData);
          stack.pop();
        }
        const item = line.substring(headerLevel + 1);
        stack.push(item);
        currentDepth = headerLevel;
      } else if (line.trimStart().startsWith("-")) {
        const indent = this.getIndentCount(line.split("-")[0]);
        const depth = indent + 3;
        const item = line.substring(line.indexOf("-") + 1).trim();
        if (stack.length > depth) {
          const newData = stack.join(",");
          csvRows.push(newData);
          stack = stack.slice(0, depth - 1);
        } else if (stack.length === depth) {
          const newData = stack.join(",");
          csvRows.push(newData);
          stack.pop();
        }
        stack.push(item);
        currentDepth = depth;
      }
    }
    if (stack.length > 0) {
      const lastData = stack.join(",");
      csvRows.push(lastData);
      stack = [];
    }
    return csvRows.join("\n");
  }
  getIndentCount(line) {
    const match = line.replace(/\t/g, "    ").match(/^[\s]*/);
    return match ? match[0].length / 4 : 0;
  }
  async saveCsvToFile(file, csvData) {
    var _a;
    const fullPath = `${(_a = file.parent) == null ? void 0 : _a.path}/markmap-${file.basename}.csv`;
    await this.app.vault.adapter.write(fullPath, csvData);
    new import_obsidian.Notice(`save ${fullPath}`);
  }
  getCurrentDateTimeString() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const hours = String(now.getHours()).padStart(2, "0");
    const minutes = String(now.getMinutes()).padStart(2, "0");
    const seconds = String(now.getSeconds()).padStart(2, "0");
    return `${year}${month}${day}${hours}${minutes}${seconds}`;
  }
};


/* nosourcemap */